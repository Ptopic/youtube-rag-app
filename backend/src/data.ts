export default [
	{
		url: 'https://youtu.be/fP6vkjms1SQ?si=0i_fy-8qI2PDTsZQ',
		title: 'Create React Native Animated Swipe to Delete',
		youtuber: '@codereact345',
		youtuber_md5: 'b2ca535c3b277567ad621be5ad2c493f',
		video_url:
			'https://rr1---sn-uvu5a2a5t-jwnl.googlevideo.com/videoplayback?expire=1753300816&ei=7-qAaJn2OYCP2_gPnejF8Aw&ip=189.203.84.90&id=o-AKnvYEMZccs4QWGTsMwPIH2HWX39WJqkIrKnhVYmW0BS&itag=18&source=youtube&requiressl=yes&xpc=EgVo2aDSNQ%3D%3D&met=1753279215%2C&mh=dZ&mm=31%2C29&mn=sn-uvu5a2a5t-jwnl%2Csn-q4flrn7r&ms=au%2Crdu&mv=m&mvi=1&pl=24&rms=au%2Cau&initcwndbps=3236250&bui=AY1jyLPM8EoMmeMpRmmyzQ_fmyYfu1oXy5ld8Zb1zithXL1xRmy5HI7GwrpXwmCm93REkqEqPy0BKc8g&spc=l3OVKU77MVh6qfiKzTuosi0b-abJqPKkwKACTPxk9ivHajAKAxaNkwda3Zgm7SKXmE8eqcskFd7o3A&vprv=1&svpuc=1&mime=video%2Fmp4&ns=UR_jJeNcNUFaA7Oroc1JpLYQ&rqh=1&gir=yes&clen=48932142&ratebypass=yes&dur=2048.092&lmt=1734209092842704&mt=1753278341&fvip=1&fexp=51355912&c=WEB&sefc=1&txp=5319224&n=wnV7DUhgW1y0QW0oC&sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cxpc%2Cbui%2Cspc%2Cvprv%2Csvpuc%2Cmime%2Cns%2Crqh%2Cgir%2Cclen%2Cratebypass%2Cdur%2Clmt&sig=AJfQdSswRQIhAP-Aw9iT3_Pipo8jTHE36kMhSBlTCHVsGI9uEKMwOMbRAiAvxbS7URnKSYkULo8jsMVYRXYxkAXQz7Q0ga-52RjZpg%3D%3D&lsparams=met%2Cmh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Crms%2Cinitcwndbps&lsig=APaTxxMwRQIgKL7Dz3h3Vgasjz-_Pcglo4Uq2uDY0Jdie8B9AvBcE-kCIQC2rwOVx0jKRYG2e5qjtOyBFmRbrUZaapGDwpzjxzxBRw%3D%3D',
		video_length: 2048,
		likes: 69,
		views: 1996,
		date_posted: '2024-12-14T00:00:22.000Z',
		description:
			"Master Swipe to Delete Animation in React Native | React Native Swipe to Delete | Create Smooth Swipe to Delete Animations in React Native | React Native Swipeable List Item Animation | Delete with Style | Learn to Build Swipe to Delete Functionality in React Native | React Native Animated Swipe to Delete | Enhance Your App's UX | Create Interactive Swipe to Delete Feature in React Native | Build Swipeable Animated List with Delete in React Native | How to Add Swipe to Delete Animation in React Native | React Native Tutorial: Swipe to Delete Animation for Beginners\n\nWelcome to another React Native tutorial! In this video, we'll Learn how to implement an interactive swipe-to-delete feature in your React Native app with smooth animations! In this step-by-step tutorial, we‚Äôll guide you through creating a clean and responsive UI using React Native animations. Perfect for building intuitive list interactions. Watch now and level up your React Native skills!\n\nüîß Prerequisites:\nBasic knowledge of React and React Native.\nNode.js and npm installed on your machine.\nA code editor (e.g., Visual Studio Code).\n\nüì¶ Dependencies Used:\nhttps://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started/\nhttps://www.npmjs.com/package/react-native-gesture-handler\n\nüîó Relevant Links:\nReact Native: https://reactnative.dev/\n\nStay tuned for code snippets, explanations, and step-by-step guidance throughout the tutorial. Don't forget to like, share, and subscribe for more React Native tutorials and tips!\nSubscribe to the channel and hit the notification bell to never miss an update.\n\nHappy coding! üöÄ\n\n#ReactNative #Android #Tutorial #MobileAppDevelopment #JavaScript #ReactJS #MobileDevelopment #ReactNativeTutorial #JavaScript #AppDevelopment #MobileAppOptimization #FrontendDevelopment #animation #animationsoftware #draganddrop #reactnativeanimation #reanimated #gesture #scrollindicator #customscrollview #swipetodelete",
		num_comments: 12,
		subscribers: 970,
		music: {
			song: '1812 Overture (by Tchaikosvky)',
			artist: 'Tchaikovsky',
		},
		video_id: 'fP6vkjms1SQ',
		channel_url: 'https://www.youtube.com/@codereact345',
		preview_image: 'https://i.ytimg.com/vi/fP6vkjms1SQ/hqdefault.jpg',
		shortcode: 'fP6vkjms1SQ',
		verified: false,
		handle_name: 'Code React',
		avatar_img_channel:
			'https://yt3.ggpht.com/ETOqN4dSrO5Ea-M8Q_ZeGbGDmj1g3PhrF7athxAr3k3H6ukkDby1R7zSoERLDS6SfVDtUeFOwg=s48-c-k-c0x00ffffff-no-rj',
		related_videos: null,
		license: null,
		viewport_frames: '640x360 / -',
		current_optimal_res: '640x360@24 / 640x360@24',
		codecs: 'avc1.42001E, mp4a.40.2 / mp4a.40.2',
		color: 'bt709',
		quality: 'hd1080',
		quality_label: '1080p',
		post_type: 'N/A',
		youtuber_id: 'UCkj40kd6RWeDR70O7RQq18Q',
		transcript: null,
		formatted_transcript: null,
		hashtags: [
			{
				hashtag: '#reanimated',
				link: 'https://www.youtube.com/hashtag/reanimated',
			},
			{
				hashtag: '#gesture',
				link: 'https://www.youtube.com/hashtag/gesture',
			},
			{
				hashtag: '#animationsoftware',
				link: 'https://www.youtube.com/hashtag/animationsoftware',
			},
		],
		tags: [
			'react native',
			'react native swipe to delete',
			'react native tutorial',
			'swipe to delete react native',
			'react native swipe to delete tutorial',
			'react native swipe',
			'react native animation',
			'learn react native',
			'react native app',
			'react native animations',
			'swipe to delete react native flatlist',
			'flatlist swipe to delete react native',
			'react native for beginners',
			'react native tutorial for beginners',
			'react',
			'react native reanimated',
			'animated swipe to delete react native',
		],
		next_recommended_videos: [
			{
				url: 'https://www.youtube.com/channel/UCkj40kd6RWeDR70O7RQq18Q',
				title: 'Code React, channel',
				thumbnail:
					'https://yt3.ggpht.com/ETOqN4dSrO5Ea-M8Q_ZeGbGDmj1g3PhrF7athxAr3k3H6ukkDby1R7zSoERLDS6SfVDtUeFOwg=s400-c-k-c0x00ffffff-no-rj',
				startMs: 2043041,
				endMs: 2048041,
				style: 'CHANNEL',
			},
			{
				url: 'https://www.youtube.com/watch?v=Jts5xnPwlOs',
				title:
					'Create a Stunning Animated Drawer Navigation in React Native (Part 2) | Reanimated + Pressable, video',
				thumbnail: 'https://i.ytimg.com/vi/Jts5xnPwlOs/maxresdefault.jpg',
				startMs: 2043041,
				endMs: 2048041,
				style: 'VIDEO',
			},
		],
		recommended_videos: [
			{
				url: 'https://www.youtube.com/watch?v=RggZ8esxx5E',
				title:
					'Create React Native Animated Custom Carousel | Add Animated Dot Pagination (Part 2)',
				thumbnail:
					'https://i.ytimg.com/vi/RggZ8esxx5E/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLAQtNkBEQLJpe_lbGP4ipnFgUekRQ',
			},
			{
				url: 'https://www.youtube.com/watch?v=jfKfPfyJRdk',
				title: 'lofi hip hop radio üìö beats to relax/study to',
				thumbnail:
					'https://i.ytimg.com/vi/jfKfPfyJRdk/hqdefault.jpg?v=67ece60a&sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLA8ThF1iSMMP5o3VbSKETLx6WhMxQ',
			},
			{
				url: 'https://www.youtube.com/watch?v=edn7FurOFxM',
				title:
					'Summer Lofi Chill ‚òÄÔ∏è Ocean Coffee for Relaxing Morning üåä Lofi Hip Hop / Beats to relax/chill/study',
				thumbnail:
					'https://i.ytimg.com/vi/edn7FurOFxM/hqdefault.jpg?v=681d6e04&sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLAOC5yni0a8LNYQNuUZtg8YocwAzA',
			},
			{
				url: 'https://www.youtube.com/watch?v=SUwjOEhKH5c',
				title:
					'React Native Custom Animated Swipe Button | Gradient & Single Color Customization!',
				thumbnail:
					'https://i.ytimg.com/vi/SUwjOEhKH5c/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLAX93lJ4UsLmk0CnWOwDx8UAjPYDQ',
			},
			{
				url: 'https://www.youtube.com/watch?v=i4jKoTlSqvI&pp=0gcJCccJAYcqIYzv',
				title: 'Infinite Scroll in React Native: Pagination with FlatList',
				thumbnail:
					'https://i.ytimg.com/vi/i4jKoTlSqvI/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLAtHyUTKLhKOjJEdeJ_rGzxNhJseg',
			},
			{
				url: 'https://www.youtube.com/watch?v=HBpsTyGUTZM',
				title: 'E S P R E S S O',
				thumbnail:
					'https://i.ytimg.com/vi/HBpsTyGUTZM/hqdefault.jpg?sqp=-oaymwFBCNACELwBSFryq4qpAzMIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB8AEB-AH-CYAC0AWKAgwIABABGHIgTSg6MA8=&rs=AOn4CLBg9sBkH4lDTIzpEWesalNiNhbXsQ',
			},
			{
				url: 'https://www.youtube.com/watch?v=s9QknDy7Mxg',
				title:
					'Fresh Ocean Air In The Morning Light üåä Morning Lofi Music For A Peaceful Morning üåä Ocean Lofi Vibes',
				thumbnail:
					'https://i.ytimg.com/vi/s9QknDy7Mxg/hqdefault.jpg?v=682a912b&sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLB5ZK-a_DC7NjRentZJgHULtnysOA',
			},
			{
				url: 'https://www.youtube.com/watch?v=U4VRHqtgA1M&pp=0gcJCccJAYcqIYzv',
				title: 'Creating a Custom OTP Inputs in React Native',
				thumbnail:
					'https://i.ytimg.com/vi/U4VRHqtgA1M/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLBelPTzROIs6DpoqgiD_XWEjxf1NQ',
			},
			{
				url: 'https://www.youtube.com/watch?v=THh4fT0O7IY',
				title:
					'Upbeat Lofi - Deep Focus & Energy for Work [R&B, Neo Soul, Lofi Hiphop]',
				thumbnail:
					'https://i.ytimg.com/vi/THh4fT0O7IY/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLBj55Lw2yTZt78xXmQkYX0DZQ6xFg',
			},
			{
				url: 'https://www.youtube.com/watch?v=6oYdM9_5-E0',
				title:
					'Animated Blur Bottom Tab View and Animated Lists in React Native | Stunning UI for iOS & Android',
				thumbnail:
					'https://i.ytimg.com/vi/6oYdM9_5-E0/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLBcnYsNd1mISQP6XO5f6-8d1uBtWw',
			},
			{
				url: 'https://www.youtube.com/watch?v=5v-z79NQJC0',
				title:
					"/ùêßùê® ùê®ùêØùêûùê´ùê≠ùê¢ùê¶ùêû | 80's Tokyo Funky Lofi Playlist üéß | Broadcasting Beyond | Relax & Chill & Study to",
				thumbnail:
					'https://i.ytimg.com/vi/5v-z79NQJC0/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLArss_MqFLlcj-NSaEotzRu-D-mhA',
			},
		],
		transcript_language: [],
		chapters: null,
		transcription_language: null,
		timestamp: '2025-07-23T14:00:17.370Z',
		input: {
			url: 'https://youtu.be/fP6vkjms1SQ?si=0i_fy-8qI2PDTsZQ',
			country: '',
			transcription_language: '',
		},
	},
	{
		url: 'https://youtu.be/H0CuK7MPtnI?si=cWnmEiiCkus-TDuQ',
		title: 'TanStack Query in React Native for Beginners | React Query v5',
		youtuber: '@itzpradip',
		youtuber_md5: 'bad158188de2f0c48b0096e721aec49a',
		video_url:
			'https://rr2---sn-u25-o8uez.googlevideo.com/videoplayback?expire=1753300816&ei=8OqAaL-zOfaOobIPk_vRkQ4&ip=177.130.238.160&id=o-AM9dk9MMqQXe2tSZkXlo-EgBQ7uDwyP3GRtQ6Wh1IIq1&itag=18&source=youtube&requiressl=yes&xpc=EgVo2aDSNQ%3D%3D&met=1753279216%2C&mh=06&mm=31%2C29&mn=sn-u25-o8uez%2Csn-bg0s7nly&ms=au%2Crdu&mv=m&mvi=2&pl=21&rms=au%2Cau&initcwndbps=2463750&bui=AY1jyLN8dKPq7JpcRJOeK6S8SDoVFIeXzDFBGCkvPK8y1gJa9aeRZqmFkBhNhDCBO_CfPVpSU-UHKImk&spc=l3OVKWeWKX2ZigmLNT3YOWoJY7G1Pq-CuMEM6wgbgs0JZOVpZEFIdFphNLnskYNWeQZ1kSkT4BlicQ&vprv=1&svpuc=1&mime=video%2Fmp4&ns=7urBUHv69Ir4z2XkghCOVOoQ&rqh=1&gir=yes&clen=51826199&ratebypass=yes&dur=2104.935&lmt=1753198520390456&mt=1753278341&fvip=1&fexp=51355912&c=WEB&sefc=1&txp=5319224&n=65g2a6wkS-0-Os30Q&sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cxpc%2Cbui%2Cspc%2Cvprv%2Csvpuc%2Cmime%2Cns%2Crqh%2Cgir%2Cclen%2Cratebypass%2Cdur%2Clmt&sig=AJfQdSswRQIhAPD4Te2O0MH7lYhAfU7vO_GS6M4tx_0_AY751OzotwEXAiACgI7MWMs5kTSE0iUIVxTSIf775S1qn5YnBFBF1DBw6Q%3D%3D&lsparams=met%2Cmh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Crms%2Cinitcwndbps&lsig=APaTxxMwRQIgdl_lvinE4o0DEwKZgU0m2kMEbGt5mc4z61w0najDUZ4CIQDj3tXKboFXVcDIKvGb_xJZzq5_QG6FeYLCxsPPWc3v_w%3D%3D',
		video_length: 2105,
		likes: 20,
		views: 246,
		date_posted: '2025-07-22T12:44:35.000Z',
		description:
			"In this tutorial, you'll learn everything you need to know about TanStack Query v5 in React Native. This is a beginner friendly tutorial, so you'll learn everything from scratch, what is useQuery, mutation, what is the benefit of using react or tanstack query in your app. Here I've created a basic todo application to show how we can use tanstack query to display, cache, and manage data fetched from an API. \n\nüëâ React Native Shopping Cart with Zustand and MMKV Tutorial https://youtu.be/6okrkCLwu68\nüëâ Zustand Tutorial for Beginners https://youtu.be/U2Hg-MAAz_M\nüëâ MMKV Tutorial for Beginners https://youtu.be/7N5fug4O-zg\n\nüëâ Redux vs Context API https://youtu.be/hh4Jxd9ZZ5M\nüëâ Custom Drawer Navigator in Expo Router Tutorial https://youtu.be/6LGWYRcDLwY \nüëâ React Native ToDo App for Beginners Tutorial https://youtu.be/CfSK9niSAxY\n\nüî¥ Build an Image Generator App in React Native Tutorial https://youtu.be/aqM3NcRsT5U\nüî¥ Complete eCommerce App UI in React Native https://youtu.be/Tx664OnM5SA\nüî¥ Complete News App in React Native Tutorial https://youtu.be/sKuC-ejnPgY\nüî¥ Finance App UI Tutorial in React Native with Expo Router https://youtu.be/MLVxvof54KA\nüî¥ Travel App UI in React Native with Expo Router Tutorial https://youtu.be/lIQIeIdUXFI\n\n‚Üí Animated Image Carousel Tutorial in React Native https://youtu.be/wIh60UQzUKY \n‚Üí Animated Custom Bottom TabBar in React Native Tutorial https://youtu.be/GrLCS5ww030\n‚Üí Social App with Firebase in React Native Playlist https://www.youtube.com/playlist?list=PLQWFhX-gwJbmrCwksjn77tdl36dIWPFAt\n‚Üí React navigation v6 tutorial playlist https://www.youtube.com/playlist?list=PLQWFhX-gwJbmtZY4mcRE-k7hL9DigcGS-\n‚Üí Food Finder App in React Native Playlist https://youtube.com/playlist?list=PLQWFhX-gwJbkETb0lfml7W8VvZb-Hc8oK\n\n‚ñ∫ Timestamps\n0:00 Intro\n0:46 Displaying API data using useState and useEffect Hooks\n6:50 Replace Everything with useQuery from TanStack Query\n11:06 CRUD Operations\n16:50 useMutation to create/edit/delete\n\nIf you found my tutorials helpful, you can buy me a coffee from this link https://paypal.me/PDNTechnology\n\nFollow me on Twitter https://twitter.com/itzpradip\nFollow me on GitHub https://github.com/itzpradip\n\nSubscribe to my Channel http://bit.ly/2PaUqOk\n\nFor more tutorials on WordPress, React JS, React Native and Flutter visit: http://www.pradipdebnath.com/blog/",
		num_comments: 2,
		subscribers: 46300,
		video_id: 'H0CuK7MPtnI',
		channel_url: 'https://www.youtube.com/@itzpradip',
		preview_image: 'https://i.ytimg.com/vi/H0CuK7MPtnI/hqdefault.jpg',
		shortcode: 'H0CuK7MPtnI',
		verified: false,
		handle_name: 'Pradip Debnath',
		avatar_img_channel:
			'https://yt3.ggpht.com/qPkIk33xUGLBr36JVrpvo_mmb6LfUXrGa-XpRq5QxHWDTipYIsRnpQhxSSRj39DL-8c1RQwlrw=s48-c-k-c0x00ffffff-no-rj',
		related_videos: null,
		license: null,
		viewport_frames: '640x360 / -',
		current_optimal_res: '640x360@25 / 640x360@25',
		codecs: 'avc1.42001E, mp4a.40.2 / mp4a.40.2',
		color: 'bt709',
		quality: 'hd2160',
		quality_label: '2160p',
		post_type: 'N/A',
		youtuber_id: 'UC43N9Z8Fm0gg1Lgpw0eS9rg',
		transcript:
			"Intro Hey guys, welcome back to my YouTube channel. Today in this tutorial, we are going to discuss about tanstack query or react query. Previously it was react query but right now it is named as tanstack query. As you can see it is a powerful asynchronous state management for typescript, javascript, react, solid view all those kind of things. Okay. So that's why it is not react query anymore. It is standst query. So that is what we are going to use in our react native app. So if you are interested in these kinds of tutorial then hit the like button subscribe to my channel for more tutorials like this and don't forget to hit the notification bell icon so that you get notified whenever I post a new tutorial on this channel. So without wasting any more time let's get started and here I have already created an expo project and here I have already Displaying API data using useState and useEffect Hooks installed this tanstack query. So here you can see that this is have been installed and here in the docs if we go then here we can see the installation guide. So from the installation guide I have used this npm command and you can use others as well. We have pnpm, yarn and burn. So whatever is suitable for you you can use that to install the tstack query. Here it is installed and with that I have created a sample API which is in this db.json file. So here I have created a to-dos data and with this we can create a fake API which we can use in our project and for that I'm going to use JSON server. This is the JSON server which I have already installed on my computer and that is what I'm going to use. This is the command I'm going to use. So let me copy it to run the server. So here I'm going to paste it and for me it is within the data directory data/db.json. So now hit enter and with that we can see that it is running in this endpoint. So let's open it. So here we can see this is the data which we are getting. So that's what we are going to use. And here within the env I have provided this localhost 3000 in which our API is running. So now in the index js let's display those to-dos from the API. And initially I'm going to use the normal approach which is by using state and use effect hook. And then after that I'm going to implement that same thing with react query so that we can understand what is the benefit of using react query in our project. So here for the API let's create a directory called API and then I will create a file to-do.ts and here I'm going to do the API call. So first create the API URL constant and that would be this process envo API URL and this expo public API URL we have here right in the env file. So that's what we are using for the API URL. And then we need to create the type. So for the type I can copy the data and here let's provide this JSON to TS convert from clipboard. So I have already copied the data JSON data and then from the JSON data I'm creating the type. So here we have the type. So this is what I'm interested in. I don't need this to-dos and I can export it so that I can use it from any file in my project and to create this type I'm using JSON tots extension. So now after that we need to create a function to get all the to-dos. So here we are getting this. That's what we are going to use and here let me return the data like this. So this is what we are going to use. Now save it. After that within the index I need to create the state. So here I'm going to create to-do state and we need to import use state and this to-do type as well. Now within the use effect hook we can create fetch todos function. And here within the try block I will try to fetch the data. So here for the result I can use get todos function which we have created here right. So that's what I have imported and we can set to-dos with the result. For the error we can catch the error and console log it. Now we need to call the fetch todos. So by this we are getting the result. And now here let's provide a flat list. And for the flat list data, we are going to provide this to-do. And for the render item, let me provide the to-do data. Now with the save here, we can see we have the data. So now here you can see that we have to use the use state hook and the use effect hook to fetch the data. And in a real world scenario, this API call might take some time. So for that we need to check for the loading that is also we need to take into consideration and by default I will set it to false and also with that we need to check for the error. So that's what we need to handle. So that's why I have created two more state is loading and error. We need to check for the loading state. So here I'm just faking a time duration. So that I can do by the set time out and here within the set time out I'm going to provide 1 second delay and within it I will call this set to-dos. Okay and here I will set is loading as true and when we will set to-do then I will set is loading as false and here based on that I will provide checking. So first if is loading then we will provide a loader like this then if we have error then we will provide the error here. So we are not setting the error. Here I have provided the error in the console. But for a real app providing the error in the console will not help the user. So that's why here we need to set the error and based on that we are checking it here. So here error dot message we can provide like this. So now let's save. So here you can see we have the loader and then we are getting the data. So all these things you can understand. So this is the code which we need to implement this simple API call and displaying the data. Now we are going to replace it Replace Everything with useQuery from TanStack Query with the react query and for that let's go to the documentation of it and here let's see. So here we can see first we have this query client and we need to wrap the app with query client provider. So that we can do within the layout.tsx. This is the root layout by which the app is getting rendered. So here I can wrap this stack with the query client provider. So here let's import something from tanstack react query and here that would be query client and query client provider. Now here let's create the query client. And now let's wrap this stack with query client provider. And for the client we need to provide the query client. And now let's close this query client provider. We have provided this query client properly. Now we can use it here. So let's comment out all these things. And here let's create query. We are going to use use query hook from the tan query. Okay. So within this use query hook we can provide query key and here we need to provide an unique key for this particular query and then for this query we need to provide the query function as well. So here we have the query function and this is the function which we are going to call. So here within this use query hook we are running this function get todos which is this function which is calling the API and then with this query key it is caching the data. So it is handling the cache management of the data by this query key and this is the unique key which we need to use for the caching of this particular data which is being returned from this function. Now if we output this query in the console then let's see what we are getting. So here we can see we are getting lots of things. We are getting the data error fetch status is error is fetched all of these things and with that we are also getting some error as well. I will check the error later. Here we can get the data like this and along with it we can get lots of things like this. Okay. So here we have is pending is loading is error. So these are the things which is mostly required. So here we can use is pending which is being used while the data is getting fetched from the API. And then we have the error as well. And here for the data I can name it as todos which we are using here. Okay. So now if I save it then here we can see we have the data present right and we don't need all these codes. So all of these code have been replaced by this use query hook only which is only two lines of code. So now we can get rid of these things. And here we can use this one. Instead of is loading I'm going to use is pending. For the error we have the error like this. So now let's save it. Now let's see the error how it is handling the error. Let me provide a checking for the error. If response is not okay then we are going to provide this error. And now here I'm going to deliberately setting an error. I'm not providing the correct URL from the todos. I have removed the s. Now let's save it. Now after that let's reload here. And here we can see the loader. It is loading. And right now it is trying to get the data but it didn't get it. So finally it have been failed. And here we can see the data which we have provided for the error. So that's how we can handle the error. So you can understand that how easy it is to handle the API call with use query from react query. And with this it is also handling the caching. Now let's deep dive into it and let's implement some other features as well. So now here I'm going to create other functions as well. So first I'm CRUD Operations going to create function for create to-do. So this is how we are going to create to-do and here I'm going to get the text. So here we are going to get the text this particular text and from the text we are going to create the to-do. So here it will be like this. And for the ID also I'm going to provide the current date time string and for this one also I'm going to get it in the data and return the data. So this is the create to-do function and then after creating we are going to delete as well. So for the delete this is how it is. We are going to get the id of the to-do and from that id we are going to delete it within the fetch method we are going to use the delete. Let's get it in the result and we are going to return the result dot JSON like this and with it we are going to create update to-do. So for the update to-do we are going to get the todo. So that means as here we are creating the to-do by the text but here for this update to-do we are getting complete to-do with all the values in it and then we are providing it like this. So we have provided all the functions get todo, create to-do, delete and update. And now with this I'm going to create another function which is get todo by id which would be like this but I will name it as get todo by ID. And here also I'm going to make it like this. And let's return the data. So for this get to-do by id we are passing the id parameter and within this fetch we are fetching the to-do based on the id passed to this function and we are returning the data. So these are all the functions which we need. Now in the index let's first create this style and here for the style container let's provide all these things. Now let's import stylesheet from React Native and let's provide the container here and here let's create render to-do function and this will be list render item type and the type of it would be todo. So this to-do needs to be imported from our API to-do file and then we are returning it. So now instead of this let's use render to-do function. So nothing have been changed for this container. Let's provide padding 20. Now I'm going to design this to-do. So here I'm going to provide it like this. And let's return let's provide a view and I will name it as to-do container and then I will provide the style of to-do text for this text. After that I will create a view and this view will be for the to-do actions. Okay. So what are the actions we need? We need delete edit. So for that here I'm going to provide touchable opacity for the button. And here we need to provide the icon. So I need to import the icon from vector icons. And I'm going to get an icons. So here I'm going to use trash icon. Now let's create these styles. So we have todo container. Then we have todo text and todo actions. For the to-do container I'm going to provide flex direction row justify content space between align item center margin bottom 10. For the width I will provide 100% and for the todo text I will provide width 80%. And here I don't provide any kind of margin button. Let's use margin vertical here. So now it is looking good. So we have this delete button and with this I'm going to create another section which will be for add to-do. I will name it as add to-do container. Within it I will provide a text input and for this placeholder let's provide this text. Then for this style let's provide this add to-do input and with this I need to provide a button which would be touchable opacity like this. So now let's save it and with the save here I need to create this add to-do container. So here for this add to-do container flex direction I will provide row for the align items. Let's provide center. For the justify content it would be space between and for the width I will provide 100%. And for the input let's provide flex one margin right 10 pixel for the border width let's provide one and for the border color I will provide gray color for the border radius let's provide five and for the padding let's provide 10. So here it is. So here our to-do and here is the at todo. So now let's implement the functionality of adding a to-do. So to add a to-do we need to create a to-do state. And here for this text input value let's provide todo and for the onchange text of it we will set the to-do. Now we need to call this create to-do function and that we useMutation to create/edit/delete can do by this mutation. So here we have this use mutation hook which we can use to create update or delete the data. So that's what we need to use now. So here we can create add mutation and here let's import use mutation hook from react query and then within it we need to provide mutation function. So for the mutation function we can provide this create to-do this function we need to import from our API and then for on success of it we can get the data and let's output the data in the console and here to call this mutation we need to create another function which would be handle to-do and here it would be like this add mutation dot mutate and here we need to pass this to-do state which we have created. Okay, which we are setting here on change text we are setting this to-do. So we are passing this to-do to this add mutation dotmutate and this will be passed to this mutation function and in this mutation function create to-do you can see that we are expecting a string a string text right. So this is what we are passing by this muted method. So that is how it will be passed and then when this create to-do function will run properly then after that we are updating this to-do with this empty string. So that here we get clear input field. After saving here let's provide test to-do. Now after that let's click here and yes we are not calling it. So we need to call this here for the on press of it we need to call this handle to-do function. Okay. So now let's click here and after clicking here we can see we have this success in the console that means it have run properly but here we are not seeing it and if we see the database db.json the data have been updated to the JSON as well. So this is the JSON server which is running here. So this JSON server is handling all these things. So within this function we are posting this data and we are getting it in this JSON file. Right? So we can see that it is already created the data but we are not seeing it here. If we reload the app, okay, it is showing an error. Let me check what is the actual issue. Okay, I think it is because of these returns. I need to provide it here. Okay. So now it's working. So I was returning this before handling these hooks. So we need to handle it before then we can return. That's why it was showing that error otherwise within the calling of these hooks we don't have any kind of error. Let me change the name to handle add to-do. Okay. So, it is working fine. But here we can see that whenever we are adding the data that time it is not updating it. Another to-do. Here we can see the success but here we are not seeing the data updated on the screen and in the JSON file also we can see the data right but we are not seeing it here. And that is because here we have the query key and by this key as I have mentioned earlier that it is caching the data. So that's why it is not updating. So to update this we need to invalidate the query. And to invalidate the query we need to create a query client by use query client hook which needs to be imported from react query. And then here on success we can use that. So query client dot invalidate queries. By this we are invalidating the query and here we need to specify the query key which is particularly we want to invalidate so that it will remove the cast data. So now let's save it. After that let's add another one. So hello test. Now let's click here. So with that here we can see we have the hello test added which we are seeing on the screen right. So like this we can cast the data by providing the query key and that is what we need to provide. This is the basic structure of the use query hook we need to provide a query function and the query key and whenever our data updates that time we need to invalidate that query we need to clear the cache then it will update it. So by this query key we are handling it. Now we need to delete it. So let's delete the to-do. And for that let's create delete mutation. And here let's use the use mutation. And here it will be similar kind of things. Mutation function. We have delete to-do and we need to import this delete to-do function from our API and then we are invalidating the query. To see the functionality in effect, we need to invalidate the query as we have done previously. Right? And now we need to call this delete mutation dot muted as we have done here. And we need to pass the id to this delete to-do function. So here in the delete to-do, we are getting a id. So we need to pass that and that we can do here. So let's create handle delete to-do and delete mutation dot muted and we are passing the id item do id and now for this on press let's provide handle delete to-do function. Now with the save let's delete this another to-do. So with this click here we can see it have been deleted and let's go to the database. So here we are seeing the test to-do hello test but we are not seeing any another to-do right. So this delete function is working perfectly well. Now we need to provide an update. So here for each to-do here we can see completed as false or true. We can set it like this. So here for this one we can see it is true. We can handle the completion like this. So let's create update mutation. And here it is the similar thing we need to import this update to-do and for on success we are invalidating the query and within this render to-do let's create handle toouble to-do. So here we have created this handle toggle to-do function and here this updated to-do. So we are dstructuring all the properties of the item and we are just toggling this completed. So if it is true then it will be false. If it is false then it will become true. And then we are calling this mutation function by this update mutation domuted updated to-do. We are passing this to-do. And here we can see for the update to-do we are accepting to-do. Okay, we are not accepting ID or text. We are accepting complete to-do. So that's what we have provided here with the updated to-do. Right now we can provide that for this text. So for this text on press we can provide handle toggle to-do function and here let me provide a text decoration line through. So if it is complete then it will have a line otherwise it will have none. So with that we can see we have this line for this to-do as it is true. Let's go to DB. So here we can see this particular one is true. Okay. And for this one, yeah, invest in cryptocurrency, that is also true as well. So these two are true. Now let's click on it. So here we can see it is also true. Okay. And we can uncheck it as well. So it is not done yet. And it is done. So that's how it is working. So all the functionalities are working perfectly well. Now we are left with only one thing which is the get todo by ID and for that here I'm going to create another touchable opacity and that will be for edit. So I will provide pencil outline here. Yeah like this. Now if I click here then I want to open another screen as a model where we will have this particular to-do and we can update the text of the to-do. So for that here I'm going to create edit tsx and let's create this edit and for this layout let's provide stack screen index and the stack screen edit and here I'm going to provide presentation as model. Okay now here I'm going to open it by this link which needs to be imported from export router. So for the link href I need to provide the path name and here the path name would be edit and for the parameter passed to it I will provide ID which would be the item ID and now let's close this link and here we need to provide as child because for this touchable opacity we are going to provide this functionality. Now let's save it. Now with the save let's click here. So here we can see the edit and here by this use local search params we can get the id and let's provide it here. So it is edit three edit one and for the hello test it is edit this number. So we are getting the data properly and now we need to use this get todo by id and this is little bit different here we are getting the to-do by this get todos and the query key was todos right but for this one it will be little bit different here let's provide use query and for the use query query key we need to provide dynamic data so that's how we can provide it so here it would first todo. So it will be like this todo by 3 todo/3 or four or five whatever the number would be that would be like this. So this particular thing is dynamic. So that is what we have provided here the id and here we have the string. So this is how we can provide the key and here we need to import this get todo by id function and here we need to provide this id and here we are seeing an error that string or array of string is not assignable to string so it could be string or array of string but it is not so I'm going to specifically make it to string and here we can get data is pending and error so these are the three things which we need most of the time and here let me create a text input then let's provide touchable opacity save and for this style here I'm going to provide this styles for the view let's provide container and for the input let's provide input style now to handle this data we need to create a state called to-do and here within the use effect I'm going to provide this set to-do data and here for this text input value I'm going to provide the to-do and for the onchange text I'm going to set this to-do let's save it so here we can see that we have the data present and we can provide the update as well right so that's how we are handling it okay so here we are upd Updating this set to-do with the data which we are getting from this use query function. Whenever this data changes initially we will not have the data. It will call the function. So first we will not have the data but then we will have the data that time it will update this to-do and based on this to-do we are providing this value here and whatever we are going to change here that is getting updated in this state and that we can use to edit this to-do. So now let's provide this edit functionality. So let's create the edit mutation and here it would be use mutation and for the use mutation we need to provide mutation function update to-do and this is the same function this update to-do which we have used here. So for the update mutation we have used it and for the update mutation mutate we have provided the updated to-do. So we have provided the complete to-do. So that's what we need to provide here as well. So let's create handle update function and here it would be edit mutation dotmutate and here we need to provide this to-do. We are already getting the id. So we are providing that and then we have the to-do. So this is the todo dot todo. So that's what we can provide simply by providing todo and completed would be false. Or if we want to provide the same state then we can do it by providing data completed. But I think the completed as false would be perfect. So if anything is completed previously but we are updating it that means it is not completed yet and we want to complete. So that's why I think the false would be perfect for this scenario. And now for this touchable opacity on press let's provide the handle update. Now let's save it. Now let's provide an update here. Watch a classic movie on Netflix. Now let's save it. Now after saving here we can see the output in the console that we have a success. So whatever we have provided here that is there and in the DB also we can see that it is updated properly. But here we are not seeing the update. So I want to provide that functionality. So that I can provide similarly like this. So we need to get the query client. Let's import the query client from 10step query and then use it here. So query client invalidate queries and we want to invalidate queries this one. So here it is not updated. This I need to update. So that is the query key to-dos. So it is not this query key. It is the query key of this one. Right? And I want to close this one as well. So now let's save it. Watch a documentary on Amazon Prime. Let's save it. Now with the save here we can see that it have been closed. But here it is not updated yet. Now let's do a reload. So here we can see that all the updates but now let's see if it is working perfectly or not. So let's delete it. So watch a documentary and here we can see watch a documentary right. So hello test edits. So here we can see hello test edits. Okay. So it is working perfectly well. And now you can see and you can understand that what is the benefit of it. Here it is managing the data fetching caching the data and it is very easy to create a larger application and managing the different types of API calls efficiently. Otherwise you can understand that when we have tried to fetch the data initially that time already we had so much of code and we need to use the three different kind of states to manage the data. So you can understand that if the API call increases and there are multiple screens multiple data fetching then you can understand that there would be lots of use effect use state hooks needs to be involved in that project and then to cache the data you have to manage that separately. So all these things is being handled beautifully here in this react query or tanstack query and here also for this edit we can provide these functions as well. So I think you have got a clear understanding of what is the benefit of using tanstack query in your project whether it is small project or a big project it will be really helpful for you to manage the project and implement any kind of feature in it. So this is the tutorial guys. I hope you have learned something new from this tutorial. If you do so, then hit the like button, subscribe to my channel for more tutorials like this and let me know by commenting down below. If you have any kind of sation for me, then also let me know. And don't forget to share this tutorial with your friends and colleagues and I will see you guys in my next tutorial. In the meantime, have a great day. Goodbye.",
		formatted_transcript: [
			{
				start_time: 0,
				end_time: 46000,
				duration: 46000,
				text: 'Intro',
			},
			{
				start_time: 160,
				end_time: 6400,
				duration: 6240,
				text: 'Hey guys, welcome back to my YouTube channel. Today in this tutorial, we are going to discuss about tanstack query or',
			},
			{
				start_time: 6400,
				end_time: 13920,
				duration: 7520,
				text: 'react query. Previously it was react query but right now it is named as tanstack query. As you can see it is a',
			},
			{
				start_time: 13920,
				end_time: 19279,
				duration: 5359,
				text: 'powerful asynchronous state management for typescript, javascript, react, solid',
			},
			{
				start_time: 19279,
				end_time: 26320,
				duration: 7041,
				text: "view all those kind of things. Okay. So that's why it is not react query anymore. It is standst query. So that is",
			},
			{
				start_time: 26320,
				end_time: 32960,
				duration: 6640,
				text: 'what we are going to use in our react native app. So if you are interested in these kinds of tutorial then hit the',
			},
			{
				start_time: 32960,
				end_time: 39040,
				duration: 6080,
				text: "like button subscribe to my channel for more tutorials like this and don't forget to hit the notification bell icon",
			},
			{
				start_time: 39040,
				end_time: 45200,
				duration: 6160,
				text: "so that you get notified whenever I post a new tutorial on this channel. So without wasting any more time let's get",
			},
			{
				start_time: 45200,
				end_time: 50879,
				duration: 5679,
				text: 'started and here I have already created an expo project and here I have already',
			},
			{
				start_time: 46000,
				end_time: 410000,
				duration: 364000,
				text: 'Displaying API data using useState and useEffect Hooks',
			},
			{
				start_time: 50879,
				end_time: 59039,
				duration: 8160,
				text: 'installed this tanstack query. So here you can see that this is have been installed and here in the docs if we go',
			},
			{
				start_time: 59039,
				end_time: 66799,
				duration: 7760,
				text: 'then here we can see the installation guide. So from the installation guide I have used this npm command and you can',
			},
			{
				start_time: 66799,
				end_time: 73600,
				duration: 6801,
				text: 'use others as well. We have pnpm, yarn and burn. So whatever is suitable for you you can use that to install the',
			},
			{
				start_time: 73600,
				end_time: 79119,
				duration: 5519,
				text: 'tstack query. Here it is installed and with that I have created a sample API',
			},
			{
				start_time: 79119,
				end_time: 85360,
				duration: 6241,
				text: 'which is in this db.json file. So here I have created a to-dos data and with this',
			},
			{
				start_time: 85360,
				end_time: 90560,
				duration: 5200,
				text: "we can create a fake API which we can use in our project and for that I'm",
			},
			{
				start_time: 90560,
				end_time: 96320,
				duration: 5760,
				text: 'going to use JSON server. This is the JSON server which I have',
			},
			{
				start_time: 96320,
				end_time: 102799,
				duration: 6479,
				text: "already installed on my computer and that is what I'm going to use. This is the command I'm going to use. So let me",
			},
			{
				start_time: 102799,
				end_time: 109040,
				duration: 6241,
				text: "copy it to run the server. So here I'm going to paste it and for me it is",
			},
			{
				start_time: 109040,
				end_time: 115680,
				duration: 6640,
				text: 'within the data directory data/db.json. So now hit enter and with that we can',
			},
			{
				start_time: 115680,
				end_time: 121759,
				duration: 6079,
				text: "see that it is running in this endpoint. So let's open it. So here we can see",
			},
			{
				start_time: 121759,
				end_time: 126960,
				duration: 5201,
				text: "this is the data which we are getting. So that's what we are going to use. And",
			},
			{
				start_time: 126960,
				end_time: 134720,
				duration: 7760,
				text: 'here within the env I have provided this localhost 3000 in which our API is',
			},
			{
				start_time: 134720,
				end_time: 141040,
				duration: 6320,
				text: "running. So now in the index js let's display those to-dos from the API. And",
			},
			{
				start_time: 141040,
				end_time: 147920,
				duration: 6880,
				text: "initially I'm going to use the normal approach which is by using state and use effect hook. And then after that I'm",
			},
			{
				start_time: 147920,
				end_time: 155040,
				duration: 7120,
				text: 'going to implement that same thing with react query so that we can understand what is the benefit of using react query',
			},
			{
				start_time: 155040,
				end_time: 161760,
				duration: 6720,
				text: "in our project. So here for the API let's create a directory called API and",
			},
			{
				start_time: 161760,
				end_time: 168400,
				duration: 6640,
				text: "then I will create a file to-do.ts and here I'm going to do the API call. So",
			},
			{
				start_time: 168400,
				end_time: 176080,
				duration: 7680,
				text: 'first create the API URL constant and that would be this process envo',
			},
			{
				start_time: 176080,
				end_time: 183360,
				duration: 7280,
				text: 'API URL and this expo public API URL we have here right in the env file. So',
			},
			{
				start_time: 183360,
				end_time: 188640,
				duration: 5280,
				text: "that's what we are using for the API URL. And then we need to create the",
			},
			{
				start_time: 188640,
				end_time: 196560,
				duration: 7920,
				text: "type. So for the type I can copy the data and here let's provide this JSON to",
			},
			{
				start_time: 196560,
				end_time: 201920,
				duration: 5360,
				text: 'TS convert from clipboard. So I have already copied the data JSON data and',
			},
			{
				start_time: 201920,
				end_time: 207680,
				duration: 5760,
				text: "then from the JSON data I'm creating the type. So here we have the type. So this",
			},
			{
				start_time: 207680,
				end_time: 213760,
				duration: 6080,
				text: "is what I'm interested in. I don't need this to-dos and I can export it so that",
			},
			{
				start_time: 213760,
				end_time: 220239,
				duration: 6479,
				text: "I can use it from any file in my project and to create this type I'm using JSON",
			},
			{
				start_time: 220239,
				end_time: 226319,
				duration: 6080,
				text: 'tots extension. So now after that we need to create a function to get all the',
			},
			{
				start_time: 226319,
				end_time: 232159,
				duration: 5840,
				text: "to-dos. So here we are getting this. That's what we are going to use and here",
			},
			{
				start_time: 232159,
				end_time: 238319,
				duration: 6160,
				text: 'let me return the data like this. So this is what we are going to use. Now',
			},
			{
				start_time: 238319,
				end_time: 244720,
				duration: 6401,
				text: "save it. After that within the index I need to create the state. So here I'm",
			},
			{
				start_time: 244720,
				end_time: 251360,
				duration: 6640,
				text: 'going to create to-do state and we need to import use state and this to-do type',
			},
			{
				start_time: 251360,
				end_time: 257759,
				duration: 6399,
				text: 'as well. Now within the use effect hook we can create fetch todos function. And',
			},
			{
				start_time: 257759,
				end_time: 264720,
				duration: 6961,
				text: 'here within the try block I will try to fetch the data. So here for the result I',
			},
			{
				start_time: 264720,
				end_time: 271280,
				duration: 6560,
				text: "can use get todos function which we have created here right. So that's what I",
			},
			{
				start_time: 271280,
				end_time: 277360,
				duration: 6080,
				text: 'have imported and we can set to-dos with the result. For the error we can catch',
			},
			{
				start_time: 277360,
				end_time: 282720,
				duration: 5360,
				text: 'the error and console log it. Now we need to call the fetch todos. So by this',
			},
			{
				start_time: 282720,
				end_time: 288639,
				duration: 5919,
				text: "we are getting the result. And now here let's provide a flat list. And for the",
			},
			{
				start_time: 288639,
				end_time: 294479,
				duration: 5840,
				text: 'flat list data, we are going to provide this to-do. And for the render item, let',
			},
			{
				start_time: 294479,
				end_time: 299919,
				duration: 5440,
				text: 'me provide the to-do data. Now with the save here, we can see we have the data.',
			},
			{
				start_time: 299919,
				end_time: 305680,
				duration: 5761,
				text: 'So now here you can see that we have to use the use state hook and the use',
			},
			{
				start_time: 305680,
				end_time: 311520,
				duration: 5840,
				text: 'effect hook to fetch the data. And in a real world scenario, this API call might',
			},
			{
				start_time: 311520,
				end_time: 317600,
				duration: 6080,
				text: 'take some time. So for that we need to check for the loading that is also we',
			},
			{
				start_time: 317600,
				end_time: 323199,
				duration: 5599,
				text: 'need to take into consideration and by default I will set it to false and also',
			},
			{
				start_time: 323199,
				end_time: 330560,
				duration: 7361,
				text: "with that we need to check for the error. So that's what we need to handle. So that's why I have created two more",
			},
			{
				start_time: 330560,
				end_time: 336320,
				duration: 5760,
				text: "state is loading and error. We need to check for the loading state. So here I'm",
			},
			{
				start_time: 336320,
				end_time: 342800,
				duration: 6480,
				text: 'just faking a time duration. So that I can do by the set time out and here',
			},
			{
				start_time: 342800,
				end_time: 348880,
				duration: 6080,
				text: "within the set time out I'm going to provide 1 second delay and within it I",
			},
			{
				start_time: 348880,
				end_time: 355919,
				duration: 7039,
				text: 'will call this set to-dos. Okay and here I will set is loading as true and when',
			},
			{
				start_time: 355919,
				end_time: 362479,
				duration: 6560,
				text: 'we will set to-do then I will set is loading as false and here based on that',
			},
			{
				start_time: 362479,
				end_time: 368319,
				duration: 5840,
				text: 'I will provide checking. So first if is loading then we will provide a loader',
			},
			{
				start_time: 368319,
				end_time: 373840,
				duration: 5521,
				text: 'like this then if we have error then we will provide the error here. So we are',
			},
			{
				start_time: 373840,
				end_time: 380319,
				duration: 6479,
				text: 'not setting the error. Here I have provided the error in the console. But for a real app providing the error in',
			},
			{
				start_time: 380319,
				end_time: 386400,
				duration: 6081,
				text: "the console will not help the user. So that's why here we need to set the error",
			},
			{
				start_time: 386400,
				end_time: 392960,
				duration: 6560,
				text: 'and based on that we are checking it here. So here error dot message we can',
			},
			{
				start_time: 392960,
				end_time: 399280,
				duration: 6320,
				text: "provide like this. So now let's save. So here you can see we have the loader and",
			},
			{
				start_time: 399280,
				end_time: 407039,
				duration: 7759,
				text: 'then we are getting the data. So all these things you can understand. So this is the code which we need to implement',
			},
			{
				start_time: 407039,
				end_time: 412880,
				duration: 5841,
				text: 'this simple API call and displaying the data. Now we are going to replace it',
			},
			{
				start_time: 410000,
				end_time: 666000,
				duration: 256000,
				text: 'Replace Everything with useQuery from TanStack Query',
			},
			{
				start_time: 412880,
				end_time: 419680,
				duration: 6800,
				text: "with the react query and for that let's go to the documentation of it and here",
			},
			{
				start_time: 419680,
				end_time: 425599,
				duration: 5919,
				text: "let's see. So here we can see first we have this query client and we need to",
			},
			{
				start_time: 425599,
				end_time: 433039,
				duration: 7440,
				text: 'wrap the app with query client provider. So that we can do within the layout.tsx.',
			},
			{
				start_time: 433039,
				end_time: 438240,
				duration: 5201,
				text: 'This is the root layout by which the app is getting rendered. So here I can wrap',
			},
			{
				start_time: 438240,
				end_time: 443840,
				duration: 5600,
				text: "this stack with the query client provider. So here let's import something",
			},
			{
				start_time: 443840,
				end_time: 450160,
				duration: 6320,
				text: 'from tanstack react query and here that would be query client and query client',
			},
			{
				start_time: 450160,
				end_time: 455759,
				duration: 5599,
				text: "provider. Now here let's create the query client. And now let's wrap this",
			},
			{
				start_time: 455759,
				end_time: 461199,
				duration: 5440,
				text: 'stack with query client provider. And for the client we need to provide the',
			},
			{
				start_time: 461199,
				end_time: 466479,
				duration: 5280,
				text: "query client. And now let's close this query client provider. We have provided",
			},
			{
				start_time: 466479,
				end_time: 472080,
				duration: 5601,
				text: "this query client properly. Now we can use it here. So let's comment out all",
			},
			{
				start_time: 472080,
				end_time: 477840,
				duration: 5760,
				text: "these things. And here let's create query. We are going to use use query",
			},
			{
				start_time: 477840,
				end_time: 485440,
				duration: 7600,
				text: 'hook from the tan query. Okay. So within this use query hook we can provide query',
			},
			{
				start_time: 485440,
				end_time: 491280,
				duration: 5840,
				text: 'key and here we need to provide an unique key for this particular query and',
			},
			{
				start_time: 491280,
				end_time: 496400,
				duration: 5120,
				text: 'then for this query we need to provide the query function as well. So here we',
			},
			{
				start_time: 496400,
				end_time: 503599,
				duration: 7199,
				text: 'have the query function and this is the function which we are going to call. So here within this use query hook we are',
			},
			{
				start_time: 503599,
				end_time: 509759,
				duration: 6160,
				text: 'running this function get todos which is this function which is calling the API',
			},
			{
				start_time: 509759,
				end_time: 514880,
				duration: 5121,
				text: 'and then with this query key it is caching the data. So it is handling the',
			},
			{
				start_time: 514880,
				end_time: 521440,
				duration: 6560,
				text: 'cache management of the data by this query key and this is the unique key which we need to use for the caching of',
			},
			{
				start_time: 521440,
				end_time: 526959,
				duration: 5519,
				text: 'this particular data which is being returned from this function. Now if we',
			},
			{
				start_time: 526959,
				end_time: 532800,
				duration: 5841,
				text: "output this query in the console then let's see what we are getting. So here",
			},
			{
				start_time: 532800,
				end_time: 540959,
				duration: 8159,
				text: 'we can see we are getting lots of things. We are getting the data error fetch status is error is fetched all of',
			},
			{
				start_time: 540959,
				end_time: 548480,
				duration: 7521,
				text: 'these things and with that we are also getting some error as well. I will check the error later. Here we can get the',
			},
			{
				start_time: 548480,
				end_time: 555600,
				duration: 7120,
				text: 'data like this and along with it we can get lots of things like this. Okay. So',
			},
			{
				start_time: 555600,
				end_time: 561279,
				duration: 5679,
				text: 'here we have is pending is loading is error. So these are the things which is',
			},
			{
				start_time: 561279,
				end_time: 567279,
				duration: 6000,
				text: 'mostly required. So here we can use is pending which is being used while the',
			},
			{
				start_time: 567279,
				end_time: 572959,
				duration: 5680,
				text: 'data is getting fetched from the API. And then we have the error as well. And',
			},
			{
				start_time: 572959,
				end_time: 580880,
				duration: 7921,
				text: 'here for the data I can name it as todos which we are using here. Okay. So now if',
			},
			{
				start_time: 580880,
				end_time: 587360,
				duration: 6480,
				text: "I save it then here we can see we have the data present right and we don't need",
			},
			{
				start_time: 587360,
				end_time: 592480,
				duration: 5120,
				text: 'all these codes. So all of these code have been replaced by this use query',
			},
			{
				start_time: 592480,
				end_time: 597600,
				duration: 5120,
				text: 'hook only which is only two lines of code. So now we can get rid of these',
			},
			{
				start_time: 597600,
				end_time: 603200,
				duration: 5600,
				text: "things. And here we can use this one. Instead of is loading I'm going to use",
			},
			{
				start_time: 603200,
				end_time: 608399,
				duration: 5199,
				text: "is pending. For the error we have the error like this. So now let's save it.",
			},
			{
				start_time: 608399,
				end_time: 616640,
				duration: 8241,
				text: "Now let's see the error how it is handling the error. Let me provide a checking for the error. If response is",
			},
			{
				start_time: 616640,
				end_time: 622160,
				duration: 5520,
				text: "not okay then we are going to provide this error. And now here I'm going to",
			},
			{
				start_time: 622160,
				end_time: 629680,
				duration: 7520,
				text: "deliberately setting an error. I'm not providing the correct URL from the todos. I have removed the s. Now let's",
			},
			{
				start_time: 629680,
				end_time: 636320,
				duration: 6640,
				text: "save it. Now after that let's reload here. And here we can see the loader. It is",
			},
			{
				start_time: 636320,
				end_time: 642720,
				duration: 6400,
				text: "loading. And right now it is trying to get the data but it didn't get it. So",
			},
			{
				start_time: 642720,
				end_time: 649760,
				duration: 7040,
				text: "finally it have been failed. And here we can see the data which we have provided for the error. So that's how we can",
			},
			{
				start_time: 649760,
				end_time: 655120,
				duration: 5360,
				text: 'handle the error. So you can understand that how easy it is to handle the API',
			},
			{
				start_time: 655120,
				end_time: 660560,
				duration: 5440,
				text: 'call with use query from react query. And with this it is also handling the',
			},
			{
				start_time: 660560,
				end_time: 665600,
				duration: 5040,
				text: "caching. Now let's deep dive into it and let's implement some other features as",
			},
			{
				start_time: 665600,
				end_time: 671760,
				duration: 6160,
				text: "well. So now here I'm going to create other functions as well. So first I'm",
			},
			{
				start_time: 666000,
				end_time: 1010000,
				duration: 344000,
				text: 'CRUD Operations',
			},
			{
				start_time: 671760,
				end_time: 679600,
				duration: 7840,
				text: "going to create function for create to-do. So this is how we are going to create to-do and here I'm going to get",
			},
			{
				start_time: 679600,
				end_time: 685360,
				duration: 5760,
				text: 'the text. So here we are going to get the text this particular text and from',
			},
			{
				start_time: 685360,
				end_time: 691279,
				duration: 5919,
				text: 'the text we are going to create the to-do. So here it will be like this. And',
			},
			{
				start_time: 691279,
				end_time: 697279,
				duration: 6000,
				text: "for the ID also I'm going to provide the current date time string and for this",
			},
			{
				start_time: 697279,
				end_time: 703279,
				duration: 6000,
				text: "one also I'm going to get it in the data and return the data. So this is the",
			},
			{
				start_time: 703279,
				end_time: 709600,
				duration: 6321,
				text: 'create to-do function and then after creating we are going to delete as well.',
			},
			{
				start_time: 709600,
				end_time: 715120,
				duration: 5520,
				text: 'So for the delete this is how it is. We are going to get the id of the to-do and',
			},
			{
				start_time: 715120,
				end_time: 722800,
				duration: 7680,
				text: "from that id we are going to delete it within the fetch method we are going to use the delete. Let's get it in the",
			},
			{
				start_time: 722800,
				end_time: 729360,
				duration: 6560,
				text: 'result and we are going to return the result dot JSON like this and with it we',
			},
			{
				start_time: 729360,
				end_time: 735120,
				duration: 5760,
				text: 'are going to create update to-do. So for the update to-do we are going to',
			},
			{
				start_time: 735120,
				end_time: 741200,
				duration: 6080,
				text: 'get the todo. So that means as here we are creating the to-do by the text but',
			},
			{
				start_time: 741200,
				end_time: 748480,
				duration: 7280,
				text: 'here for this update to-do we are getting complete to-do with all the values in it and then we are providing',
			},
			{
				start_time: 748480,
				end_time: 754160,
				duration: 5680,
				text: 'it like this. So we have provided all the functions get todo, create to-do,',
			},
			{
				start_time: 754160,
				end_time: 760240,
				duration: 6080,
				text: "delete and update. And now with this I'm going to create another function which",
			},
			{
				start_time: 760240,
				end_time: 768000,
				duration: 7760,
				text: 'is get todo by id which would be like this but I will name it as get todo by',
			},
			{
				start_time: 768000,
				end_time: 774399,
				duration: 6399,
				text: "ID. And here also I'm going to make it like this. And let's return the data. So",
			},
			{
				start_time: 774399,
				end_time: 779680,
				duration: 5281,
				text: 'for this get to-do by id we are passing the id parameter and within this fetch',
			},
			{
				start_time: 779680,
				end_time: 784800,
				duration: 5120,
				text: 'we are fetching the to-do based on the id passed to this function and we are',
			},
			{
				start_time: 784800,
				end_time: 792880,
				duration: 8080,
				text: "returning the data. So these are all the functions which we need. Now in the index let's first create this style and",
			},
			{
				start_time: 792880,
				end_time: 799279,
				duration: 6399,
				text: "here for the style container let's provide all these things. Now let's",
			},
			{
				start_time: 799279,
				end_time: 805839,
				duration: 6560,
				text: "import stylesheet from React Native and let's provide the container here and",
			},
			{
				start_time: 805839,
				end_time: 812160,
				duration: 6321,
				text: "here let's create render to-do function and this will be list render item type",
			},
			{
				start_time: 812160,
				end_time: 817839,
				duration: 5679,
				text: 'and the type of it would be todo. So this to-do needs to be imported from our',
			},
			{
				start_time: 817839,
				end_time: 823839,
				duration: 6000,
				text: "API to-do file and then we are returning it. So now instead of this let's use",
			},
			{
				start_time: 823839,
				end_time: 831600,
				duration: 7761,
				text: "render to-do function. So nothing have been changed for this container. Let's provide padding 20. Now I'm going to",
			},
			{
				start_time: 831600,
				end_time: 837680,
				duration: 6080,
				text: "design this to-do. So here I'm going to provide it like this. And let's return",
			},
			{
				start_time: 837680,
				end_time: 844639,
				duration: 6959,
				text: "let's provide a view and I will name it as to-do container",
			},
			{
				start_time: 844639,
				end_time: 849920,
				duration: 5281,
				text: 'and then I will provide the style of to-do text for this text. After that I',
			},
			{
				start_time: 849920,
				end_time: 856399,
				duration: 6479,
				text: 'will create a view and this view will be for the to-do actions. Okay. So what are',
			},
			{
				start_time: 856399,
				end_time: 862240,
				duration: 5841,
				text: "the actions we need? We need delete edit. So for that here I'm going to",
			},
			{
				start_time: 862240,
				end_time: 868240,
				duration: 6000,
				text: 'provide touchable opacity for the button. And here we need to provide the',
			},
			{
				start_time: 868240,
				end_time: 874639,
				duration: 6399,
				text: "icon. So I need to import the icon from vector icons. And I'm going to get an",
			},
			{
				start_time: 874639,
				end_time: 880320,
				duration: 5681,
				text: "icons. So here I'm going to use trash icon. Now let's create these styles. So",
			},
			{
				start_time: 880320,
				end_time: 885680,
				duration: 5360,
				text: 'we have todo container. Then we have todo text and todo actions. For the',
			},
			{
				start_time: 885680,
				end_time: 890959,
				duration: 5279,
				text: "to-do container I'm going to provide flex direction row justify content space",
			},
			{
				start_time: 890959,
				end_time: 897440,
				duration: 6481,
				text: 'between align item center margin bottom 10. For the width I will provide 100%',
			},
			{
				start_time: 897440,
				end_time: 904160,
				duration: 6720,
				text: "and for the todo text I will provide width 80%. And here I don't provide any",
			},
			{
				start_time: 904160,
				end_time: 910160,
				duration: 6000,
				text: "kind of margin button. Let's use margin vertical here. So now it is looking",
			},
			{
				start_time: 910160,
				end_time: 916320,
				duration: 6160,
				text: "good. So we have this delete button and with this I'm going to create another",
			},
			{
				start_time: 916320,
				end_time: 922000,
				duration: 5680,
				text: 'section which will be for add to-do. I will name it as add to-do container.',
			},
			{
				start_time: 922000,
				end_time: 927519,
				duration: 5519,
				text: "Within it I will provide a text input and for this placeholder let's provide",
			},
			{
				start_time: 927519,
				end_time: 933440,
				duration: 5921,
				text: "this text. Then for this style let's provide this add to-do input and with",
			},
			{
				start_time: 933440,
				end_time: 938880,
				duration: 5440,
				text: 'this I need to provide a button which would be touchable opacity like this. So',
			},
			{
				start_time: 938880,
				end_time: 944480,
				duration: 5600,
				text: "now let's save it and with the save here I need to create this add to-do",
			},
			{
				start_time: 944480,
				end_time: 949519,
				duration: 5039,
				text: 'container. So here for this add to-do container',
			},
			{
				start_time: 949519,
				end_time: 955040,
				duration: 5521,
				text: "flex direction I will provide row for the align items. Let's provide center.",
			},
			{
				start_time: 955040,
				end_time: 963600,
				duration: 8560,
				text: "For the justify content it would be space between and for the width I will provide 100%. And for the input let's",
			},
			{
				start_time: 963600,
				end_time: 971040,
				duration: 7440,
				text: "provide flex one margin right 10 pixel for the border width let's provide one",
			},
			{
				start_time: 971040,
				end_time: 976320,
				duration: 5280,
				text: "and for the border color I will provide gray color for the border radius let's",
			},
			{
				start_time: 976320,
				end_time: 983040,
				duration: 6720,
				text: "provide five and for the padding let's provide 10. So here it is. So here our",
			},
			{
				start_time: 983040,
				end_time: 988480,
				duration: 5440,
				text: "to-do and here is the at todo. So now let's implement the functionality of",
			},
			{
				start_time: 988480,
				end_time: 996560,
				duration: 8080,
				text: 'adding a to-do. So to add a to-do we need to create a to-do state. And here',
			},
			{
				start_time: 996560,
				end_time: 1004000,
				duration: 7440,
				text: "for this text input value let's provide todo and for the onchange text of it we",
			},
			{
				start_time: 1004000,
				end_time: 1010399,
				duration: 6399,
				text: 'will set the to-do. Now we need to call this create to-do function and that we',
			},
			{
				start_time: 1010000,
				end_time: 2105000,
				duration: 1095000,
				text: 'useMutation to create/edit/delete',
			},
			{
				start_time: 1010399,
				end_time: 1017680,
				duration: 7281,
				text: 'can do by this mutation. So here we have this use mutation hook which we can use',
			},
			{
				start_time: 1017680,
				end_time: 1024558,
				duration: 6878,
				text: "to create update or delete the data. So that's what we need to use now. So here",
			},
			{
				start_time: 1024559,
				end_time: 1031360,
				duration: 6801,
				text: "we can create add mutation and here let's import use mutation hook from",
			},
			{
				start_time: 1031360,
				end_time: 1037038,
				duration: 5678,
				text: 'react query and then within it we need to provide mutation function. So for the',
			},
			{
				start_time: 1037039,
				end_time: 1042319,
				duration: 5280,
				text: 'mutation function we can provide this create to-do this function we need to',
			},
			{
				start_time: 1042319,
				end_time: 1050000,
				duration: 7681,
				text: 'import from our API and then for on success of it we can get the data and',
			},
			{
				start_time: 1050000,
				end_time: 1055919,
				duration: 5919,
				text: "let's output the data in the console and here to call this mutation we need to",
			},
			{
				start_time: 1055919,
				end_time: 1061679,
				duration: 5760,
				text: 'create another function which would be handle to-do and here it would be like',
			},
			{
				start_time: 1061679,
				end_time: 1068240,
				duration: 6561,
				text: 'this add mutation dot mutate and here we need to pass this to-do state which we',
			},
			{
				start_time: 1068240,
				end_time: 1074160,
				duration: 5920,
				text: 'have created. Okay, which we are setting here on change text we are setting this',
			},
			{
				start_time: 1074160,
				end_time: 1080720,
				duration: 6560,
				text: 'to-do. So we are passing this to-do to this add mutation dotmutate and this',
			},
			{
				start_time: 1080720,
				end_time: 1086400,
				duration: 5680,
				text: 'will be passed to this mutation function and in this mutation function create',
			},
			{
				start_time: 1086400,
				end_time: 1093360,
				duration: 6960,
				text: 'to-do you can see that we are expecting a string a string text right. So this is',
			},
			{
				start_time: 1093360,
				end_time: 1098720,
				duration: 5360,
				text: 'what we are passing by this muted method. So that is how it will be passed',
			},
			{
				start_time: 1098720,
				end_time: 1103840,
				duration: 5120,
				text: 'and then when this create to-do function will run properly then after that we are',
			},
			{
				start_time: 1103840,
				end_time: 1109039,
				duration: 5199,
				text: 'updating this to-do with this empty string. So that here we get clear input',
			},
			{
				start_time: 1109039,
				end_time: 1115120,
				duration: 6081,
				text: "field. After saving here let's provide test to-do. Now after that let's click",
			},
			{
				start_time: 1115120,
				end_time: 1122480,
				duration: 7360,
				text: 'here and yes we are not calling it. So we need to call this here for the on',
			},
			{
				start_time: 1122480,
				end_time: 1129520,
				duration: 7040,
				text: "press of it we need to call this handle to-do function. Okay. So now let's click",
			},
			{
				start_time: 1129520,
				end_time: 1135360,
				duration: 5840,
				text: 'here and after clicking here we can see we have this success in the console that',
			},
			{
				start_time: 1135360,
				end_time: 1141600,
				duration: 6240,
				text: 'means it have run properly but here we are not seeing it and if we see the',
			},
			{
				start_time: 1141600,
				end_time: 1147440,
				duration: 5840,
				text: 'database db.json the data have been updated to the JSON as well. So this is',
			},
			{
				start_time: 1147440,
				end_time: 1152559,
				duration: 5119,
				text: 'the JSON server which is running here. So this JSON server is handling all',
			},
			{
				start_time: 1152559,
				end_time: 1159120,
				duration: 6561,
				text: 'these things. So within this function we are posting this data and we are getting',
			},
			{
				start_time: 1159120,
				end_time: 1165200,
				duration: 6080,
				text: 'it in this JSON file. Right? So we can see that it is already created the data',
			},
			{
				start_time: 1165200,
				end_time: 1172320,
				duration: 7120,
				text: 'but we are not seeing it here. If we reload the app, okay, it is showing an error. Let me',
			},
			{
				start_time: 1172320,
				end_time: 1179760,
				duration: 7440,
				text: 'check what is the actual issue. Okay, I think it is because of these returns. I',
			},
			{
				start_time: 1179760,
				end_time: 1186400,
				duration: 6640,
				text: 'need to provide it here. Okay.',
			},
			{
				start_time: 1186400,
				end_time: 1192400,
				duration: 6000,
				text: "So now it's working. So I was returning this before handling these hooks. So we",
			},
			{
				start_time: 1192400,
				end_time: 1199280,
				duration: 6880,
				text: "need to handle it before then we can return. That's why it was showing that error otherwise within the calling of",
			},
			{
				start_time: 1199280,
				end_time: 1204480,
				duration: 5200,
				text: "these hooks we don't have any kind of error. Let me change the name to handle",
			},
			{
				start_time: 1204480,
				end_time: 1210559,
				duration: 6079,
				text: 'add to-do. Okay. So, it is working fine. But here',
			},
			{
				start_time: 1210559,
				end_time: 1215760,
				duration: 5201,
				text: 'we can see that whenever we are adding the data that time it is not updating',
			},
			{
				start_time: 1215760,
				end_time: 1222720,
				duration: 6960,
				text: 'it. Another to-do. Here we can see the success but here we',
			},
			{
				start_time: 1222720,
				end_time: 1227760,
				duration: 5040,
				text: 'are not seeing the data updated on the screen and in the JSON file also we can',
			},
			{
				start_time: 1227760,
				end_time: 1233760,
				duration: 6000,
				text: 'see the data right but we are not seeing it here. And that is because here we',
			},
			{
				start_time: 1233760,
				end_time: 1239039,
				duration: 5279,
				text: 'have the query key and by this key as I have mentioned earlier that it is',
			},
			{
				start_time: 1239039,
				end_time: 1244640,
				duration: 5601,
				text: "caching the data. So that's why it is not updating. So to update this we need",
			},
			{
				start_time: 1244640,
				end_time: 1251440,
				duration: 6800,
				text: 'to invalidate the query. And to invalidate the query we need to',
			},
			{
				start_time: 1251440,
				end_time: 1257039,
				duration: 5599,
				text: 'create a query client by use query client hook which needs to be imported',
			},
			{
				start_time: 1257039,
				end_time: 1263919,
				duration: 6880,
				text: 'from react query. And then here on success we can use that. So query client',
			},
			{
				start_time: 1263919,
				end_time: 1270320,
				duration: 6401,
				text: 'dot invalidate queries. By this we are invalidating the query and here we need',
			},
			{
				start_time: 1270320,
				end_time: 1278000,
				duration: 7680,
				text: 'to specify the query key which is particularly we want to invalidate so that it will remove the cast data. So',
			},
			{
				start_time: 1278000,
				end_time: 1284960,
				duration: 6960,
				text: "now let's save it. After that let's add another one. So hello test. Now let's",
			},
			{
				start_time: 1284960,
				end_time: 1290799,
				duration: 5839,
				text: 'click here. So with that here we can see we have the hello test added which we',
			},
			{
				start_time: 1290799,
				end_time: 1296480,
				duration: 5681,
				text: 'are seeing on the screen right. So like this we can cast the data by providing',
			},
			{
				start_time: 1296480,
				end_time: 1301919,
				duration: 5439,
				text: 'the query key and that is what we need to provide. This is the basic structure',
			},
			{
				start_time: 1301919,
				end_time: 1309600,
				duration: 7681,
				text: 'of the use query hook we need to provide a query function and the query key and whenever our data updates that time we',
			},
			{
				start_time: 1309600,
				end_time: 1314880,
				duration: 5280,
				text: 'need to invalidate that query we need to clear the cache then it will update it.',
			},
			{
				start_time: 1314880,
				end_time: 1320240,
				duration: 5360,
				text: "So by this query key we are handling it. Now we need to delete it. So let's",
			},
			{
				start_time: 1320240,
				end_time: 1326000,
				duration: 5760,
				text: "delete the to-do. And for that let's create delete mutation. And here let's",
			},
			{
				start_time: 1326000,
				end_time: 1331440,
				duration: 5440,
				text: 'use the use mutation. And here it will be similar kind of things. Mutation',
			},
			{
				start_time: 1331440,
				end_time: 1336480,
				duration: 5040,
				text: 'function. We have delete to-do and we need to import this delete to-do',
			},
			{
				start_time: 1336480,
				end_time: 1341600,
				duration: 5120,
				text: 'function from our API and then we are invalidating the query. To see the',
			},
			{
				start_time: 1341600,
				end_time: 1349520,
				duration: 7920,
				text: 'functionality in effect, we need to invalidate the query as we have done previously. Right? And now we need to',
			},
			{
				start_time: 1349520,
				end_time: 1355120,
				duration: 5600,
				text: 'call this delete mutation dot muted as we have done here. And we need to pass',
			},
			{
				start_time: 1355120,
				end_time: 1360960,
				duration: 5840,
				text: 'the id to this delete to-do function. So here in the delete to-do, we are getting',
			},
			{
				start_time: 1360960,
				end_time: 1367520,
				duration: 6560,
				text: "a id. So we need to pass that and that we can do here. So let's create handle",
			},
			{
				start_time: 1367520,
				end_time: 1373679,
				duration: 6159,
				text: 'delete to-do and delete mutation dot muted and we are passing the id item do',
			},
			{
				start_time: 1373679,
				end_time: 1378799,
				duration: 5120,
				text: "id and now for this on press let's provide handle delete to-do function.",
			},
			{
				start_time: 1378799,
				end_time: 1384640,
				duration: 5841,
				text: "Now with the save let's delete this another to-do. So with this click here",
			},
			{
				start_time: 1384640,
				end_time: 1390400,
				duration: 5760,
				text: "we can see it have been deleted and let's go to the database. So here we are",
			},
			{
				start_time: 1390400,
				end_time: 1395600,
				duration: 5200,
				text: 'seeing the test to-do hello test but we are not seeing any another to-do right.',
			},
			{
				start_time: 1395600,
				end_time: 1400880,
				duration: 5280,
				text: 'So this delete function is working perfectly well. Now we need to provide',
			},
			{
				start_time: 1400880,
				end_time: 1407440,
				duration: 6560,
				text: 'an update. So here for each to-do here we can see completed as false or true.',
			},
			{
				start_time: 1407440,
				end_time: 1412720,
				duration: 5280,
				text: 'We can set it like this. So here for this one we can see it is true. We can',
			},
			{
				start_time: 1412720,
				end_time: 1418559,
				duration: 5839,
				text: "handle the completion like this. So let's create update mutation. And here",
			},
			{
				start_time: 1418559,
				end_time: 1424159,
				duration: 5600,
				text: 'it is the similar thing we need to import this update to-do and for on',
			},
			{
				start_time: 1424159,
				end_time: 1429600,
				duration: 5441,
				text: "success we are invalidating the query and within this render to-do let's",
			},
			{
				start_time: 1429600,
				end_time: 1434880,
				duration: 5280,
				text: 'create handle toouble to-do. So here we have created this handle toggle to-do',
			},
			{
				start_time: 1434880,
				end_time: 1440159,
				duration: 5279,
				text: 'function and here this updated to-do. So we are dstructuring all the properties',
			},
			{
				start_time: 1440159,
				end_time: 1446000,
				duration: 5841,
				text: 'of the item and we are just toggling this completed. So if it is true then it',
			},
			{
				start_time: 1446000,
				end_time: 1453360,
				duration: 7360,
				text: 'will be false. If it is false then it will become true. And then we are calling this mutation function by this',
			},
			{
				start_time: 1453360,
				end_time: 1459120,
				duration: 5760,
				text: 'update mutation domuted updated to-do. We are passing this to-do. And here we',
			},
			{
				start_time: 1459120,
				end_time: 1466400,
				duration: 7280,
				text: 'can see for the update to-do we are accepting to-do. Okay, we are not accepting ID or text. We are accepting',
			},
			{
				start_time: 1466400,
				end_time: 1474799,
				duration: 8399,
				text: "complete to-do. So that's what we have provided here with the updated to-do. Right now we can provide that for this",
			},
			{
				start_time: 1474799,
				end_time: 1480720,
				duration: 5921,
				text: 'text. So for this text on press we can provide handle toggle to-do function and',
			},
			{
				start_time: 1480720,
				end_time: 1486640,
				duration: 5920,
				text: 'here let me provide a text decoration line through. So if it is complete then',
			},
			{
				start_time: 1486640,
				end_time: 1492320,
				duration: 5680,
				text: 'it will have a line otherwise it will have none. So with that we can see we',
			},
			{
				start_time: 1492320,
				end_time: 1499279,
				duration: 6959,
				text: "have this line for this to-do as it is true. Let's go to DB. So here we can see",
			},
			{
				start_time: 1499279,
				end_time: 1505679,
				duration: 6400,
				text: 'this particular one is true. Okay. And for this one, yeah, invest in',
			},
			{
				start_time: 1505679,
				end_time: 1510720,
				duration: 5041,
				text: "cryptocurrency, that is also true as well. So these two are true. Now let's",
			},
			{
				start_time: 1510720,
				end_time: 1518720,
				duration: 8000,
				text: 'click on it. So here we can see it is also true. Okay. And we can uncheck it',
			},
			{
				start_time: 1518720,
				end_time: 1524559,
				duration: 5839,
				text: "as well. So it is not done yet. And it is done. So that's how it is working. So",
			},
			{
				start_time: 1524559,
				end_time: 1531919,
				duration: 7360,
				text: 'all the functionalities are working perfectly well. Now we are left with only one thing which is the get todo by',
			},
			{
				start_time: 1531919,
				end_time: 1538720,
				duration: 6801,
				text: "ID and for that here I'm going to create another touchable opacity and that will",
			},
			{
				start_time: 1538720,
				end_time: 1546720,
				duration: 8000,
				text: 'be for edit. So I will provide pencil outline here. Yeah like this. Now if I',
			},
			{
				start_time: 1546720,
				end_time: 1552080,
				duration: 5360,
				text: 'click here then I want to open another screen as a model where we will have',
			},
			{
				start_time: 1552080,
				end_time: 1557760,
				duration: 5680,
				text: 'this particular to-do and we can update the text of the to-do. So for that here',
			},
			{
				start_time: 1557760,
				end_time: 1567600,
				duration: 9840,
				text: "I'm going to create edit tsx and let's create this edit and for this layout",
			},
			{
				start_time: 1567600,
				end_time: 1574480,
				duration: 6880,
				text: "let's provide stack screen index and the stack screen edit and here I'm going to",
			},
			{
				start_time: 1574480,
				end_time: 1581679,
				duration: 7199,
				text: "provide presentation as model. Okay now here I'm going to open it by this link",
			},
			{
				start_time: 1581679,
				end_time: 1587760,
				duration: 6081,
				text: 'which needs to be imported from export router. So for the link href I need to',
			},
			{
				start_time: 1587760,
				end_time: 1593760,
				duration: 6000,
				text: 'provide the path name and here the path name would be edit and for the parameter',
			},
			{
				start_time: 1593760,
				end_time: 1600159,
				duration: 6399,
				text: "passed to it I will provide ID which would be the item ID and now let's close",
			},
			{
				start_time: 1600159,
				end_time: 1606400,
				duration: 6241,
				text: 'this link and here we need to provide as child because for this touchable opacity',
			},
			{
				start_time: 1606400,
				end_time: 1612960,
				duration: 6560,
				text: "we are going to provide this functionality. Now let's save it. Now with the save let's click here. So here",
			},
			{
				start_time: 1612960,
				end_time: 1620240,
				duration: 7280,
				text: 'we can see the edit and here by this use local search params we can',
			},
			{
				start_time: 1620240,
				end_time: 1626480,
				duration: 6240,
				text: "get the id and let's provide it here. So it is edit three",
			},
			{
				start_time: 1626480,
				end_time: 1632720,
				duration: 6240,
				text: 'edit one and for the hello test it is edit this number. So we are getting the',
			},
			{
				start_time: 1632720,
				end_time: 1639440,
				duration: 6720,
				text: 'data properly and now we need to use this get todo by id and this is little',
			},
			{
				start_time: 1639440,
				end_time: 1644880,
				duration: 5440,
				text: 'bit different here we are getting the to-do by this get todos and the query',
			},
			{
				start_time: 1644880,
				end_time: 1650960,
				duration: 6080,
				text: "key was todos right but for this one it will be little bit different here let's",
			},
			{
				start_time: 1650960,
				end_time: 1657039,
				duration: 6079,
				text: 'provide use query and for the use query query key we need to provide dynamic',
			},
			{
				start_time: 1657039,
				end_time: 1663919,
				duration: 6880,
				text: "data so that's how we can provide it so here it would first todo. So it will be",
			},
			{
				start_time: 1663919,
				end_time: 1671360,
				duration: 7441,
				text: 'like this todo by 3 todo/3 or four or five whatever the number would be that',
			},
			{
				start_time: 1671360,
				end_time: 1679679,
				duration: 8319,
				text: 'would be like this. So this particular thing is dynamic. So that is what we have provided here the id and here we',
			},
			{
				start_time: 1679679,
				end_time: 1685360,
				duration: 5681,
				text: 'have the string. So this is how we can provide the key and here we need to',
			},
			{
				start_time: 1685360,
				end_time: 1692000,
				duration: 6640,
				text: 'import this get todo by id function and here we need to provide this id and here',
			},
			{
				start_time: 1692000,
				end_time: 1697679,
				duration: 5679,
				text: 'we are seeing an error that string or array of string is not assignable to',
			},
			{
				start_time: 1697679,
				end_time: 1703520,
				duration: 5841,
				text: "string so it could be string or array of string but it is not so I'm going to",
			},
			{
				start_time: 1703520,
				end_time: 1710320,
				duration: 6800,
				text: 'specifically make it to string and here we can get data is pending and error so',
			},
			{
				start_time: 1710320,
				end_time: 1716960,
				duration: 6640,
				text: 'these are the three things which we need most of the time and here let me create',
			},
			{
				start_time: 1716960,
				end_time: 1723039,
				duration: 6079,
				text: "a text input then let's provide touchable opacity save and for this",
			},
			{
				start_time: 1723039,
				end_time: 1728399,
				duration: 5360,
				text: "style here I'm going to provide this styles for the view let's provide",
			},
			{
				start_time: 1728399,
				end_time: 1734240,
				duration: 5841,
				text: "container and for the input let's provide input style now to handle this",
			},
			{
				start_time: 1734240,
				end_time: 1741679,
				duration: 7439,
				text: "data we need to create a state called to-do and here within the use effect I'm going",
			},
			{
				start_time: 1741679,
				end_time: 1748159,
				duration: 6480,
				text: "to provide this set to-do data and here for this text input value I'm going to",
			},
			{
				start_time: 1748159,
				end_time: 1754320,
				duration: 6161,
				text: "provide the to-do and for the onchange text I'm going to set this to-do let's",
			},
			{
				start_time: 1754320,
				end_time: 1760799,
				duration: 6479,
				text: 'save it so here we can see that we have the data present and we can provide the',
			},
			{
				start_time: 1760799,
				end_time: 1769039,
				duration: 8240,
				text: "update as well right so that's how we are handling it okay so",
			},
			{
				start_time: 1769039,
				end_time: 1774080,
				duration: 5041,
				text: 'here we are upd Updating this set to-do with the data which we are getting from',
			},
			{
				start_time: 1774080,
				end_time: 1780080,
				duration: 6000,
				text: 'this use query function. Whenever this data changes initially we will not have',
			},
			{
				start_time: 1780080,
				end_time: 1785120,
				duration: 5040,
				text: 'the data. It will call the function. So first we will not have the data but then',
			},
			{
				start_time: 1785120,
				end_time: 1790240,
				duration: 5120,
				text: 'we will have the data that time it will update this to-do and based on this',
			},
			{
				start_time: 1790240,
				end_time: 1797679,
				duration: 7439,
				text: 'to-do we are providing this value here and whatever we are going to change here that is getting updated in this state',
			},
			{
				start_time: 1797679,
				end_time: 1803440,
				duration: 5761,
				text: "and that we can use to edit this to-do. So now let's provide this edit",
			},
			{
				start_time: 1803440,
				end_time: 1809279,
				duration: 5839,
				text: "functionality. So let's create the edit mutation and here it would be use",
			},
			{
				start_time: 1809279,
				end_time: 1815440,
				duration: 6161,
				text: 'mutation and for the use mutation we need to provide mutation function update',
			},
			{
				start_time: 1815440,
				end_time: 1824080,
				duration: 8640,
				text: 'to-do and this is the same function this update to-do which we have used here. So',
			},
			{
				start_time: 1824080,
				end_time: 1829279,
				duration: 5199,
				text: 'for the update mutation we have used it and for the update mutation mutate we',
			},
			{
				start_time: 1829279,
				end_time: 1836799,
				duration: 7520,
				text: "have provided the updated to-do. So we have provided the complete to-do. So that's what we need to provide here as",
			},
			{
				start_time: 1836799,
				end_time: 1842080,
				duration: 5281,
				text: "well. So let's create handle update function and here it would be edit",
			},
			{
				start_time: 1842080,
				end_time: 1847760,
				duration: 5680,
				text: 'mutation dotmutate and here we need to provide this to-do. We are already',
			},
			{
				start_time: 1847760,
				end_time: 1853039,
				duration: 5279,
				text: 'getting the id. So we are providing that and then we have the to-do. So this is',
			},
			{
				start_time: 1853039,
				end_time: 1860000,
				duration: 6961,
				text: "the todo dot todo. So that's what we can provide simply by providing todo and",
			},
			{
				start_time: 1860000,
				end_time: 1866720,
				duration: 6720,
				text: 'completed would be false. Or if we want to provide the same state then we can do',
			},
			{
				start_time: 1866720,
				end_time: 1872640,
				duration: 5920,
				text: 'it by providing data completed. But I think the completed as false would be',
			},
			{
				start_time: 1872640,
				end_time: 1878960,
				duration: 6320,
				text: 'perfect. So if anything is completed previously but we are updating it that',
			},
			{
				start_time: 1878960,
				end_time: 1885919,
				duration: 6959,
				text: "means it is not completed yet and we want to complete. So that's why I think the false would be perfect for this",
			},
			{
				start_time: 1885919,
				end_time: 1893760,
				duration: 7841,
				text: "scenario. And now for this touchable opacity on press let's provide the handle update. Now let's save it. Now",
			},
			{
				start_time: 1893760,
				end_time: 1899039,
				duration: 5279,
				text: "let's provide an update here. Watch a classic",
			},
			{
				start_time: 1899039,
				end_time: 1905279,
				duration: 6240,
				text: "movie on Netflix. Now let's save it. Now after saving here we can see the output",
			},
			{
				start_time: 1905279,
				end_time: 1910960,
				duration: 5681,
				text: 'in the console that we have a success. So whatever we have provided here that',
			},
			{
				start_time: 1910960,
				end_time: 1919760,
				duration: 8800,
				text: 'is there and in the DB also we can see that it is updated properly. But here we',
			},
			{
				start_time: 1919760,
				end_time: 1925039,
				duration: 5279,
				text: 'are not seeing the update. So I want to provide that functionality. So that I',
			},
			{
				start_time: 1925039,
				end_time: 1932960,
				duration: 7921,
				text: 'can provide similarly like this. So we need to get the query client.',
			},
			{
				start_time: 1932960,
				end_time: 1939120,
				duration: 6160,
				text: "Let's import the query client from 10step query and then use it here. So",
			},
			{
				start_time: 1939120,
				end_time: 1944559,
				duration: 5439,
				text: 'query client invalidate queries and we want to invalidate queries this one. So',
			},
			{
				start_time: 1944559,
				end_time: 1950640,
				duration: 6081,
				text: 'here it is not updated. This I need to update. So that is the query key to-dos.',
			},
			{
				start_time: 1950640,
				end_time: 1958399,
				duration: 7759,
				text: 'So it is not this query key. It is the query key of this one. Right? And I want',
			},
			{
				start_time: 1958399,
				end_time: 1966960,
				duration: 8561,
				text: "to close this one as well. So now let's save it. Watch a documentary on Amazon",
			},
			{
				start_time: 1966960,
				end_time: 1972399,
				duration: 5439,
				text: "Prime. Let's save it. Now with the save here we can see that it have been",
			},
			{
				start_time: 1972399,
				end_time: 1978399,
				duration: 6000,
				text: "closed. But here it is not updated yet. Now let's do a reload. So here we can",
			},
			{
				start_time: 1978399,
				end_time: 1984320,
				duration: 5921,
				text: "see that all the updates but now let's see if it is working perfectly or not.",
			},
			{
				start_time: 1984320,
				end_time: 1991360,
				duration: 7040,
				text: "So let's delete it. So watch a documentary and here we can see watch a documentary",
			},
			{
				start_time: 1991360,
				end_time: 1998399,
				duration: 7039,
				text: 'right. So hello test edits.',
			},
			{
				start_time: 1998399,
				end_time: 2004480,
				duration: 6081,
				text: 'So here we can see hello test edits. Okay. So it is working perfectly well.',
			},
			{
				start_time: 2004480,
				end_time: 2011600,
				duration: 7120,
				text: 'And now you can see and you can understand that what is the benefit of it. Here it is managing the data',
			},
			{
				start_time: 2011600,
				end_time: 2018240,
				duration: 6640,
				text: 'fetching caching the data and it is very easy to create a larger application and',
			},
			{
				start_time: 2018240,
				end_time: 2023519,
				duration: 5279,
				text: 'managing the different types of API calls efficiently. Otherwise you can',
			},
			{
				start_time: 2023519,
				end_time: 2028640,
				duration: 5121,
				text: 'understand that when we have tried to fetch the data initially that time',
			},
			{
				start_time: 2028640,
				end_time: 2036080,
				duration: 7440,
				text: 'already we had so much of code and we need to use the three different kind of states to manage the data. So you can',
			},
			{
				start_time: 2036080,
				end_time: 2043120,
				duration: 7040,
				text: 'understand that if the API call increases and there are multiple screens multiple data fetching then you can',
			},
			{
				start_time: 2043120,
				end_time: 2050320,
				duration: 7200,
				text: 'understand that there would be lots of use effect use state hooks needs to be involved in that project and then to',
			},
			{
				start_time: 2050320,
				end_time: 2055358,
				duration: 5038,
				text: 'cache the data you have to manage that separately. So all these things is being',
			},
			{
				start_time: 2055359,
				end_time: 2062079,
				duration: 6720,
				text: 'handled beautifully here in this react query or tanstack query and here also',
			},
			{
				start_time: 2062079,
				end_time: 2067760,
				duration: 5681,
				text: 'for this edit we can provide these functions as well. So I think you have',
			},
			{
				start_time: 2067760,
				end_time: 2075118,
				duration: 7358,
				text: 'got a clear understanding of what is the benefit of using tanstack query in your project whether it is small project or a',
			},
			{
				start_time: 2075119,
				end_time: 2081679,
				duration: 6560,
				text: 'big project it will be really helpful for you to manage the project and implement any kind of feature in it. So',
			},
			{
				start_time: 2081679,
				end_time: 2087358,
				duration: 5679,
				text: 'this is the tutorial guys. I hope you have learned something new from this tutorial. If you do so, then hit the',
			},
			{
				start_time: 2087359,
				end_time: 2093839,
				duration: 6480,
				text: 'like button, subscribe to my channel for more tutorials like this and let me know by commenting down below. If you have',
			},
			{
				start_time: 2093839,
				end_time: 2099599,
				duration: 5760,
				text: "any kind of sation for me, then also let me know. And don't forget to share this tutorial with your friends and",
			},
			{
				start_time: 2099599,
				end_time: 2106800,
				duration: 7201,
				text: 'colleagues and I will see you guys in my next tutorial. In the meantime, have a great day. Goodbye.',
			},
		],
		hashtags: null,
		tags: [
			'react query tutorial',
			'tanstack query tutorial',
			'tanstack query crash course',
			'tanstack react query crash course',
			'tanstack query react native',
			'tanstack query v5 tutorial',
			'tanstack query complete course',
			'tanstack query full course',
			'react query',
			'tanstack query in react native',
			'tanstack query in react native for beginners',
			'react query v5 tutorial',
			'tanstack react query v5',
			'usequery in react native',
			'usemutation react query',
			'usequery react tanstack',
		],
		next_recommended_videos: [
			{
				url: 'https://www.youtube.com/channel/UC43N9Z8Fm0gg1Lgpw0eS9rg',
				title: 'Pradip Debnath, channel',
				thumbnail:
					'https://yt3.ggpht.com/qPkIk33xUGLBr36JVrpvo_mmb6LfUXrGa-XpRq5QxHWDTipYIsRnpQhxSSRj39DL-8c1RQwlrw=s400-c-k-c0x00ffffff-no-rj',
				startMs: 2084880,
				endMs: 2104880,
				style: 'CHANNEL',
			},
			{
				url: 'https://www.youtube.com/watch?v=6okrkCLwu68',
				title: 'üî¥ React Native Shopping Cart with Zustand and MMKV, video',
				thumbnail: 'https://i.ytimg.com/vi/6okrkCLwu68/maxresdefault.jpg',
				startMs: 2084880,
				endMs: 2104880,
				style: 'VIDEO',
			},
			{
				url: 'https://www.youtube.com/watch?v=aqM3NcRsT5U',
				title:
					'üî¥ Build an AI Image Generator App in React Native | Beginner Course, video',
				thumbnail: 'https://i.ytimg.com/vi_webp/aqM3NcRsT5U/maxresdefault.webp',
				startMs: 2084880,
				endMs: 2104880,
				style: 'VIDEO',
			},
			{
				url: 'https://www.youtube.com/watch?v=U2Hg-MAAz_M',
				title:
					'Zustand - Complete Tutorial for Beginners in React Native, video',
				thumbnail: 'https://i.ytimg.com/vi_webp/U2Hg-MAAz_M/maxresdefault.webp',
				startMs: 2084880,
				endMs: 2104880,
				style: 'VIDEO',
			},
		],
		recommended_videos: [
			{
				url: 'https://www.youtube.com/watch?v=chpSk0UKfv4',
				title:
					'Implement Bookmark Feature in React Native | Wishlist | Favourites | React Native for Beginners',
				thumbnail:
					'https://i.ytimg.com/vi/chpSk0UKfv4/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLAPaf5_K_8YT3-FawMHMnBCMQNstw',
			},
			{
				url: 'https://www.youtube.com/watch?v=mPaCnwpFvZY',
				title: 'TanStack Query - How to become a React Query God',
				thumbnail:
					'https://i.ytimg.com/vi/mPaCnwpFvZY/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLA0xgw7akY9zH7o-7dOhkn9FklmhQ',
			},
			{
				url: 'https://www.youtube.com/watch?v=U2Hg-MAAz_M',
				title: 'Zustand - Complete Tutorial for Beginners in React Native',
				thumbnail:
					'https://i.ytimg.com/vi/U2Hg-MAAz_M/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLDKGA8Y_6xR9S33RNkDQrTxAiB5rg',
			},
			{
				url: 'https://www.youtube.com/watch?v=6okrkCLwu68',
				title: 'üî¥ React Native Shopping Cart with Zustand and MMKV',
				thumbnail:
					'https://i.ytimg.com/vi/6okrkCLwu68/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLA1VytM7TUWhIlsGKXyd14W40CcLQ',
			},
			{
				url: 'https://www.youtube.com/watch?v=YObvvfuodl8',
				title:
					'React Native Authentication App 2025 | Onboarding, Sign Up, Sign In & Logout with AsyncStorage',
				thumbnail:
					'https://i.ytimg.com/vi/YObvvfuodl8/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLA5XYKnpsFPZmcpXb5hkRCiriOo-w',
			},
			{
				url: 'https://www.youtube.com/watch?v=JqSPeqKuHNE',
				title: 'React Native Calculator App for Beginners',
				thumbnail:
					'https://i.ytimg.com/vi/JqSPeqKuHNE/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLB2g14dbpetsMqmMguWaoc0sn9OKA',
			},
			{
				url: 'https://www.youtube.com/watch?v=8K1N3fE-cDs',
				title: 'React Query - Complete Tutorial',
				thumbnail:
					'https://i.ytimg.com/vi/8K1N3fE-cDs/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLAoOng9FOeHb9UrJBguE84PHJMCVA',
			},
			{
				url: 'https://www.youtube.com/watch?v=Ivf3P_4NE_E',
				title: 'How to Add Image Picker & Handle Permissions in React Native',
				thumbnail:
					'https://i.ytimg.com/vi/Ivf3P_4NE_E/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLC6mN3gQcbKLU-5n0PKWhGxo8YJRw',
			},
			{
				url: 'https://www.youtube.com/watch?v=ajLk4Hg0lCM',
				title:
					'Application Security Full Course 2025 | Application Security Tutorial For Beginners | Simplilearn',
				thumbnail:
					'https://i.ytimg.com/vi/ajLk4Hg0lCM/hqdefault.jpg?v=6880b766&sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLAzhyMqFnizZAZIYUh4KgteZxyK8A',
			},
			{
				url: 'https://www.youtube.com/watch?v=JiZVvhR63ks',
				title:
					'Complete Theme Settings Guide in React Native | Dark Theme in React Native Tutorial',
				thumbnail:
					'https://i.ytimg.com/vi/JiZVvhR63ks/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLCNQOwHqC_1mvHUWt2aFvbAoAn5sw',
			},
			{
				url: 'https://www.youtube.com/watch?v=kK_Wqx3RnHk',
				title: 'Learn useReducer In 20 Minutes',
				thumbnail:
					'https://i.ytimg.com/vi/kK_Wqx3RnHk/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLASL_ikeslh7JB7utfwRUK7S6ScMg',
			},
			{
				url: 'https://www.youtube.com/watch?v=Hp9sTsiTZ_I',
				title: 'React¬†Native for¬†Beginners tutorial',
				thumbnail:
					'https://i.ytimg.com/vi/Hp9sTsiTZ_I/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLDQst_iCAT8m8BBSRnRZOeMY3BF1w',
			},
		],
		transcript_language: [
			{ language: 'English (auto-generated)', auto_translate: true },
		],
		chapters: [
			{
				title: 'Intro',
				time_stamp: null,
				image:
					'https://i.ytimg.com/vi/H0CuK7MPtnI/hqdefault.jpg?sqp=-oaymwEmCKgBEF5IWvKriqkDGQgBFQAAiEIYAdgBAeIBCggYEAIYBjgBQAE=&rs=AOn4CLApc70nqFlnIgE4XkUw3gfNyJeAOQ',
			},
			{
				title: 'Displaying API data using useState and useEffect Hooks',
				time_stamp: '46000',
				image:
					'https://i.ytimg.com/vi/H0CuK7MPtnI/hqdefault.jpg?sqp=-oaymwEmCKgBEF5IWvKriqkDGQgBFQAAiEIYAdgBAeIBCggYEAIYBjgBQAE=&rs=AOn4CLApc70nqFlnIgE4XkUw3gfNyJeAOQ',
			},
			{
				title: 'Replace Everything with useQuery from TanStack Query',
				time_stamp: '410000',
				image:
					'https://i.ytimg.com/vi/H0CuK7MPtnI/hqdefault.jpg?sqp=-oaymwEmCKgBEF5IWvKriqkDGQgBFQAAiEIYAdgBAeIBCggYEAIYBjgBQAE=&rs=AOn4CLApc70nqFlnIgE4XkUw3gfNyJeAOQ',
			},
			{
				title: 'CRUD Operations',
				time_stamp: '666000',
				image:
					'https://i.ytimg.com/vi/H0CuK7MPtnI/hqdefault.jpg?sqp=-oaymwEmCKgBEF5IWvKriqkDGQgBFQAAiEIYAdgBAeIBCggYEAIYBjgBQAE=&rs=AOn4CLApc70nqFlnIgE4XkUw3gfNyJeAOQ',
			},
			{
				title: 'useMutation to create/edit/delete',
				time_stamp: '1010000',
				image:
					'https://i.ytimg.com/vi/H0CuK7MPtnI/hqdefault.jpg?sqp=-oaymwEmCKgBEF5IWvKriqkDGQgBFQAAiEIYAdgBAeIBCggYEAIYBjgBQAE=&rs=AOn4CLApc70nqFlnIgE4XkUw3gfNyJeAOQ',
			},
		],
		transcription_language: null,
		timestamp: '2025-07-23T14:00:22.965Z',
		input: {
			url: 'https://youtu.be/H0CuK7MPtnI?si=cWnmEiiCkus-TDuQ',
			country: '',
			transcription_language: '',
		},
	},
	{
		url: 'https://youtu.be/ALwgQZ4UtLI?si=3tZmAm8NLpWVz_wY',
		title:
			'Smooth Onboarding Flow in React Native | Custom Pagination + Reanimated Animations',
		youtuber: '@codereact345',
		youtuber_md5: 'b2ca535c3b277567ad621be5ad2c493f',
		video_url:
			'https://rr5---sn-vgqsrnlz.googlevideo.com/videoplayback?expire=1753300816&ei=8OqAaI0puq3L-w-Q9OiRAw&ip=99.99.117.55&id=o-ABZ9lILXh37hoQr13hXkab4EeWP9umzlKgJHxnFFdH46&itag=18&source=youtube&requiressl=yes&xpc=EgVo2aDSNQ%3D%3D&met=1753279216%2C&mh=wK&mm=31%2C26&mn=sn-vgqsrnlz%2Csn-q4fzen7s&ms=au%2Conr&mv=m&mvi=5&pl=20&rms=au%2Cau&initcwndbps=1822500&bui=AY1jyLOm_WPr0ruEvWt_g-YegJY1NhjzQQXyvx3Tz6LWtpIF7SVhyBaVljuRpb6P3bdWXhRRohInL_-O&spc=l3OVKeo4MAVW2dgr26fIKnuMMs7nZU9LEaMTiRANzkxd0agvH06h9Pwoi74tccY8KKlaii-XuwLNKQ&vprv=1&svpuc=1&mime=video%2Fmp4&ns=aBzKUuBge8Do24CRd4s2BocQ&rqh=1&gir=yes&clen=57058893&ratebypass=yes&dur=2546.857&lmt=1745003524936091&mt=1753278341&fvip=1&fexp=51355912&c=WEB&sefc=1&txp=6209224&n=pZmLSD6TgdOy-Y25W&sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cxpc%2Cbui%2Cspc%2Cvprv%2Csvpuc%2Cmime%2Cns%2Crqh%2Cgir%2Cclen%2Cratebypass%2Cdur%2Clmt&sig=AJfQdSswRQIgMmgKX3Z3giuuhex_-1LRehB78QlTbvnT2UXg8dufnfACIQCBJvKYNFah911m1GY2yV88zYHYVRy_ZAAfF6l9cJpBRw%3D%3D&lsparams=met%2Cmh%2Cmm%2Cmn%2Cms%2Cmv%2Cmvi%2Cpl%2Crms%2Cinitcwndbps&lsig=APaTxxMwRAIgcYYRPms11ZXy2nitLMMEQmZJUSgPEpANqfiE9EmVqGQCIEozgC20_fyzZEMVdY7_Z6BkwBuq0g19_yJMSxWok-4S',
		video_length: 2547,
		likes: 49,
		views: 1434,
		date_posted: '2025-04-18T19:30:04.000Z',
		description:
			"React Native Onboarding Screen | React Native Reanimated Tutorial | React Native Gesture Handler | React Native Custom Pagination | React Native Onboarding Animation | React Native Smooth UI | Mobile App Onboarding Screens | React Native Tutorial | Reanimated Gesture Tutorial | Onboarding Screen Design | React Native Custom Button | Animated Walkthrough Screen\n\nWelcome to another React Native tutorial! In this video, we‚Äôll create a custom onboarding flow with Reanimated animations, custom pagination indicators, and a sleek, modern design.\n\nüîπ What You‚Äôll Learn:\n‚úÖ Build a multi-screen onboarding flow in React Native\n‚úÖ Add smooth and fluid Reanimated transitions\n‚úÖ Create custom animated pagination indicators\n‚úÖ Enhance user experience with elegant UI design\n\nüî• Perfect for: Developers who want to level up their animations and UI in React Native!\nüìå Subscribe for More Amazing Content! üëç\n\nStay tuned for code snippets, explanations, and step-by-step guidance throughout the tutorial. Don't forget to like, share, and subscribe for more React Native tutorials and tips!\nSubscribe to the channel and hit the notification bell to never miss an update.\n\nHappy coding! üöÄ\n\n#ReactNative #Android #Tutorial #MobileAppDevelopment #JavaScript #ReactJS #ReactNative #AnimatedTabView #AnimatedLists #ReactNativeAnimations #Reanimated #ReactNativeUI #ReactNativeTutorial #JavaScript #AppDevelopment #MobileAppOptimization #FrontendDevelopment #animation #animationsoftware #reactnativeanimation #reanimated #gesture #OnboardingScreen #GestureHandler #CustomPagination #ReactNativeUI #MobileAppUI",
		num_comments: 5,
		subscribers: 970,
		music: { song: 'The Inner Sound', artist: 'Jesse Gallagher' },
		video_id: 'ALwgQZ4UtLI',
		channel_url: 'https://www.youtube.com/@codereact345',
		preview_image: 'https://i.ytimg.com/vi/ALwgQZ4UtLI/hqdefault.jpg',
		shortcode: 'ALwgQZ4UtLI',
		verified: false,
		handle_name: 'Code React',
		avatar_img_channel:
			'https://yt3.ggpht.com/ETOqN4dSrO5Ea-M8Q_ZeGbGDmj1g3PhrF7athxAr3k3H6ukkDby1R7zSoERLDS6SfVDtUeFOwg=s48-c-k-c0x00ffffff-no-rj',
		related_videos: null,
		license: null,
		viewport_frames: '640x360 / -',
		current_optimal_res: '640x360@24 / 640x360@24',
		codecs: 'avc1.42001E, mp4a.40.2 / mp4a.40.2',
		color: 'bt709',
		quality: 'hd1080',
		quality_label: '1080p',
		post_type: 'N/A',
		youtuber_id: 'UCkj40kd6RWeDR70O7RQq18Q',
		transcript: null,
		formatted_transcript: null,
		hashtags: [
			{
				hashtag: '#Reanimated',
				link: 'https://www.youtube.com/hashtag/reanimated',
			},
			{
				hashtag: '#gesture',
				link: 'https://www.youtube.com/hashtag/gesture',
			},
			{
				hashtag: '#animationsoftware',
				link: 'https://www.youtube.com/hashtag/animationsoftware',
			},
		],
		tags: [
			'react native reanimated',
			'react native onboarding pagination',
			'react native animated pagination',
			'react native',
			'react native ui',
			'react native animations',
			'react native onboarding',
			'premium react native animation',
			'react native pagination',
			'react native reanimate',
			'react native layout animation',
			'react native tutorial',
			'animation in ui/ux',
			'react native stagger',
			'react native carousel',
			'react native components',
			'react native development',
			'react native ios',
			'react native app',
			'reanimated',
			'code',
			'cr',
		],
		next_recommended_videos: [
			{
				url: 'https://www.youtube.com/channel/UCkj40kd6RWeDR70O7RQq18Q',
				title: 'Code React, channel',
				thumbnail:
					'https://yt3.ggpht.com/ETOqN4dSrO5Ea-M8Q_ZeGbGDmj1g3PhrF7athxAr3k3H6ukkDby1R7zSoERLDS6SfVDtUeFOwg=s400-c-k-c0x00ffffff-no-rj',
				startMs: 2541742,
				endMs: 2546742,
				style: 'CHANNEL',
			},
			{
				url: 'https://www.youtube.com/watch?v=Jts5xnPwlOs',
				title:
					'Create a Stunning Animated Drawer Navigation in React Native (Part 2) | Reanimated + Pressable, video',
				thumbnail: 'https://i.ytimg.com/vi/Jts5xnPwlOs/maxresdefault.jpg',
				startMs: 2541742,
				endMs: 2546742,
				style: 'VIDEO',
			},
		],
		recommended_videos: [
			{
				url: 'https://www.youtube.com/watch?v=cz2mwuv0UfE',
				title: 'React Native Animation Tutorial: From Zero to Hero',
				thumbnail:
					'https://i.ytimg.com/vi/cz2mwuv0UfE/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLCV2GZtlZmQIM8mqOjv7pvUpltF6Q',
			},
			{
				url: 'https://www.youtube.com/watch?v=YQYI-eE3oPw',
				title:
					'React Native Onboarding with Reanimated & Gestures | Smooth Custom Pagination',
				thumbnail:
					'https://i.ytimg.com/vi/YQYI-eE3oPw/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLDk8Ll3egb5iY6yBBqvD4XkSe4oDA',
			},
			{
				url: 'https://www.youtube.com/watch?v=BYTxPFj44uo&list=RDBYTxPFj44uo&start_radio=1&pp=oAcB',
				title: 'Why the rush? - lo-fi beats for work/study / cat jazz',
				thumbnail:
					'https://i.ytimg.com/vi/BYTxPFj44uo/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLDEY-szrJIdnOWYktNly_iDlDkEzw',
			},
			{
				url: 'https://www.youtube.com/watch?v=m8ATJwrAif0',
				title: 'React Native Onboarding Pagination Indicator - Reanimated',
				thumbnail:
					'https://i.ytimg.com/vi/m8ATJwrAif0/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLClviRd7JTFUrh0qhGBlIRCWelCSQ',
			},
			{
				url: 'https://www.youtube.com/watch?v=Q6YXEIQJDeY',
				title:
					'Create Stunning Tinder Swipe Card Animation in React Native | Step-by-Step Tutorial',
				thumbnail:
					'https://i.ytimg.com/vi/Q6YXEIQJDeY/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLCMojDWU3KwdodPx_dmGYafiCUshA',
			},
			{
				url: 'https://www.youtube.com/watch?v=THh4fT0O7IY',
				title:
					'Upbeat Lofi - Deep Focus & Energy for Work [R&B, Neo Soul, Lofi Hiphop]',
				thumbnail:
					'https://i.ytimg.com/vi/THh4fT0O7IY/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLBj55Lw2yTZt78xXmQkYX0DZQ6xFg',
			},
			{
				url: 'https://www.youtube.com/watch?v=QgCLSR9EbDc',
				title: 'React Native Animations just got WAY EASIER (Reanimated v4)',
				thumbnail:
					'https://i.ytimg.com/vi/QgCLSR9EbDc/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLB_g38W8FPH5nOfwe1yaoeADJ0BJA',
			},
			{
				url: 'https://www.youtube.com/watch?v=jT6sdSoCgQU',
				title:
					'Happy Summer Jazz ‚òï Morning Bossa Nova Piano Music and Delicate Jazz Coffee for Good Moods, Relax',
				thumbnail:
					'https://i.ytimg.com/vi/jT6sdSoCgQU/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLDMu6fgEhemF0q6z12j9heVsZ_Obg',
			},
			{
				url: 'https://www.youtube.com/watch?v=xPbRsca_l7c',
				title: 'React Native Gesture Handler and Reanimated Tutorial',
				thumbnail:
					'https://i.ytimg.com/vi/xPbRsca_l7c/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLA1DbvZg6stU5Kq3GUA7fWUJLpeAw',
			},
			{
				url: 'https://www.youtube.com/watch?v=P_gYeiFipsk',
				title: 'React Native Apple Invites animation',
				thumbnail:
					'https://i.ytimg.com/vi/P_gYeiFipsk/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLAJ2IxAcxZtiCrZKpQP_DOzZneB5Q',
			},
			{
				url: 'https://www.youtube.com/watch?v=VJW5qRaY4Wg',
				title:
					'Create a Stunning Custom Animated Carousel with MaskedView Backdrop in React Native',
				thumbnail:
					'https://i.ytimg.com/vi/VJW5qRaY4Wg/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLBpCWyrfE5lRPI9zjRI3g30MNr28A',
			},
			{
				url: 'https://www.youtube.com/watch?v=8rABwKRsec4',
				title: 'The New Code ‚Äî Sean Grove, OpenAI',
				thumbnail:
					'https://i.ytimg.com/vi/8rABwKRsec4/hqdefault.jpg?sqp=-oaymwEnCNACELwBSFryq4qpAxkIARUAAIhCGAHYAQHiAQoIGBACGAY4AUAB&rs=AOn4CLCbZJ0n0Zc-b9GyVd2-JyQ2Lxsg5Q',
			},
		],
		transcript_language: [],
		chapters: null,
		transcription_language: null,
		timestamp: '2025-07-23T14:00:17.687Z',
		input: {
			url: 'https://youtu.be/ALwgQZ4UtLI?si=3tZmAm8NLpWVz_wY',
			country: '',
			transcription_language: '',
		},
	},
];
